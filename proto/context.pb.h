// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: context.proto

#ifndef PROTOBUF_context_2eproto__INCLUDED
#define PROTOBUF_context_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_context_2eproto();
void protobuf_AssignDesc_context_2eproto();
void protobuf_ShutdownFile_context_2eproto();

class ContextElement;
class ContextElement_Link;
class ContextElement_Resource;

// ===================================================================

class ContextElement_Resource : public ::google::protobuf::Message {
 public:
  ContextElement_Resource();
  virtual ~ContextElement_Resource();

  ContextElement_Resource(const ContextElement_Resource& from);

  inline ContextElement_Resource& operator=(const ContextElement_Resource& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContextElement_Resource& default_instance();

  void Swap(ContextElement_Resource* other);

  // implements Message ----------------------------------------------

  inline ContextElement_Resource* New() const { return New(NULL); }

  ContextElement_Resource* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContextElement_Resource& from);
  void MergeFrom(const ContextElement_Resource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContextElement_Resource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:ContextElement.Resource)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_context_2eproto();
  friend void protobuf_AssignDesc_context_2eproto();
  friend void protobuf_ShutdownFile_context_2eproto();

  void InitAsDefaultInstance();
  static ContextElement_Resource* default_instance_;
};
// -------------------------------------------------------------------

class ContextElement_Link : public ::google::protobuf::Message {
 public:
  ContextElement_Link();
  virtual ~ContextElement_Link();

  ContextElement_Link(const ContextElement_Link& from);

  inline ContextElement_Link& operator=(const ContextElement_Link& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContextElement_Link& default_instance();

  void Swap(ContextElement_Link* other);

  // implements Message ----------------------------------------------

  inline ContextElement_Link* New() const { return New(NULL); }

  ContextElement_Link* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContextElement_Link& from);
  void MergeFrom(const ContextElement_Link& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContextElement_Link* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string target = 2;
  void clear_target();
  static const int kTargetFieldNumber = 2;
  const ::std::string& target() const;
  void set_target(const ::std::string& value);
  void set_target(const char* value);
  void set_target(const char* value, size_t size);
  ::std::string* mutable_target();
  ::std::string* release_target();
  void set_allocated_target(::std::string* target);

  // @@protoc_insertion_point(class_scope:ContextElement.Link)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr target_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_context_2eproto();
  friend void protobuf_AssignDesc_context_2eproto();
  friend void protobuf_ShutdownFile_context_2eproto();

  void InitAsDefaultInstance();
  static ContextElement_Link* default_instance_;
};
// -------------------------------------------------------------------

class ContextElement : public ::google::protobuf::Message {
 public:
  ContextElement();
  virtual ~ContextElement();

  ContextElement(const ContextElement& from);

  inline ContextElement& operator=(const ContextElement& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ContextElement& default_instance();

  enum TestOneofCase {
    kResource = 1,
    kLink = 2,
    TEST_ONEOF_NOT_SET = 0,
  };

  void Swap(ContextElement* other);

  // implements Message ----------------------------------------------

  inline ContextElement* New() const { return New(NULL); }

  ContextElement* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ContextElement& from);
  void MergeFrom(const ContextElement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ContextElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ContextElement_Resource Resource;
  typedef ContextElement_Link Link;

  // accessors -------------------------------------------------------

  // optional .ContextElement.Resource resource = 1;
  bool has_resource() const;
  void clear_resource();
  static const int kResourceFieldNumber = 1;
  const ::ContextElement_Resource& resource() const;
  ::ContextElement_Resource* mutable_resource();
  ::ContextElement_Resource* release_resource();
  void set_allocated_resource(::ContextElement_Resource* resource);

  // optional .ContextElement.Link link = 2;
  bool has_link() const;
  void clear_link();
  static const int kLinkFieldNumber = 2;
  const ::ContextElement_Link& link() const;
  ::ContextElement_Link* mutable_link();
  ::ContextElement_Link* release_link();
  void set_allocated_link(::ContextElement_Link* link);

  // optional string uuid = 3;
  void clear_uuid();
  static const int kUuidFieldNumber = 3;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  TestOneofCase test_oneof_case() const;
  // @@protoc_insertion_point(class_scope:ContextElement)
 private:
  inline void set_has_resource();
  inline void set_has_link();

  inline bool has_test_oneof() const;
  void clear_test_oneof();
  inline void clear_has_test_oneof();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  union TestOneofUnion {
    TestOneofUnion() {}
    ::ContextElement_Resource* resource_;
    ::ContextElement_Link* link_;
  } test_oneof_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_context_2eproto();
  friend void protobuf_AssignDesc_context_2eproto();
  friend void protobuf_ShutdownFile_context_2eproto();

  void InitAsDefaultInstance();
  static ContextElement* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ContextElement_Resource

// optional string id = 1;
inline void ContextElement_Resource::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContextElement_Resource::id() const {
  // @@protoc_insertion_point(field_get:ContextElement.Resource.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextElement_Resource::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContextElement.Resource.id)
}
inline void ContextElement_Resource::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContextElement.Resource.id)
}
inline void ContextElement_Resource::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContextElement.Resource.id)
}
inline ::std::string* ContextElement_Resource::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ContextElement.Resource.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContextElement_Resource::release_id() {
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextElement_Resource::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ContextElement.Resource.id)
}

// optional string key = 2;
inline void ContextElement_Resource::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContextElement_Resource::key() const {
  // @@protoc_insertion_point(field_get:ContextElement.Resource.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextElement_Resource::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContextElement.Resource.key)
}
inline void ContextElement_Resource::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContextElement.Resource.key)
}
inline void ContextElement_Resource::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContextElement.Resource.key)
}
inline ::std::string* ContextElement_Resource::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:ContextElement.Resource.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContextElement_Resource::release_key() {
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextElement_Resource::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ContextElement.Resource.key)
}

// optional string type = 3;
inline void ContextElement_Resource::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContextElement_Resource::type() const {
  // @@protoc_insertion_point(field_get:ContextElement.Resource.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextElement_Resource::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContextElement.Resource.type)
}
inline void ContextElement_Resource::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContextElement.Resource.type)
}
inline void ContextElement_Resource::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContextElement.Resource.type)
}
inline ::std::string* ContextElement_Resource::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:ContextElement.Resource.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContextElement_Resource::release_type() {
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextElement_Resource::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:ContextElement.Resource.type)
}

// -------------------------------------------------------------------

// ContextElement_Link

// optional string name = 1;
inline void ContextElement_Link::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContextElement_Link::name() const {
  // @@protoc_insertion_point(field_get:ContextElement.Link.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextElement_Link::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContextElement.Link.name)
}
inline void ContextElement_Link::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContextElement.Link.name)
}
inline void ContextElement_Link::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContextElement.Link.name)
}
inline ::std::string* ContextElement_Link::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ContextElement.Link.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContextElement_Link::release_name() {
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextElement_Link::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ContextElement.Link.name)
}

// optional string target = 2;
inline void ContextElement_Link::clear_target() {
  target_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContextElement_Link::target() const {
  // @@protoc_insertion_point(field_get:ContextElement.Link.target)
  return target_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextElement_Link::set_target(const ::std::string& value) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContextElement.Link.target)
}
inline void ContextElement_Link::set_target(const char* value) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContextElement.Link.target)
}
inline void ContextElement_Link::set_target(const char* value, size_t size) {
  
  target_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContextElement.Link.target)
}
inline ::std::string* ContextElement_Link::mutable_target() {
  
  // @@protoc_insertion_point(field_mutable:ContextElement.Link.target)
  return target_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContextElement_Link::release_target() {
  
  return target_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextElement_Link::set_allocated_target(::std::string* target) {
  if (target != NULL) {
    
  } else {
    
  }
  target_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target);
  // @@protoc_insertion_point(field_set_allocated:ContextElement.Link.target)
}

// -------------------------------------------------------------------

// ContextElement

// optional .ContextElement.Resource resource = 1;
inline bool ContextElement::has_resource() const {
  return test_oneof_case() == kResource;
}
inline void ContextElement::set_has_resource() {
  _oneof_case_[0] = kResource;
}
inline void ContextElement::clear_resource() {
  if (has_resource()) {
    delete test_oneof_.resource_;
    clear_has_test_oneof();
  }
}
inline  const ::ContextElement_Resource& ContextElement::resource() const {
  // @@protoc_insertion_point(field_get:ContextElement.resource)
  return has_resource()
      ? *test_oneof_.resource_
      : ::ContextElement_Resource::default_instance();
}
inline ::ContextElement_Resource* ContextElement::mutable_resource() {
  if (!has_resource()) {
    clear_test_oneof();
    set_has_resource();
    test_oneof_.resource_ = new ::ContextElement_Resource;
  }
  // @@protoc_insertion_point(field_mutable:ContextElement.resource)
  return test_oneof_.resource_;
}
inline ::ContextElement_Resource* ContextElement::release_resource() {
  if (has_resource()) {
    clear_has_test_oneof();
    ::ContextElement_Resource* temp = test_oneof_.resource_;
    test_oneof_.resource_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ContextElement::set_allocated_resource(::ContextElement_Resource* resource) {
  clear_test_oneof();
  if (resource) {
    set_has_resource();
    test_oneof_.resource_ = resource;
  }
  // @@protoc_insertion_point(field_set_allocated:ContextElement.resource)
}

// optional .ContextElement.Link link = 2;
inline bool ContextElement::has_link() const {
  return test_oneof_case() == kLink;
}
inline void ContextElement::set_has_link() {
  _oneof_case_[0] = kLink;
}
inline void ContextElement::clear_link() {
  if (has_link()) {
    delete test_oneof_.link_;
    clear_has_test_oneof();
  }
}
inline  const ::ContextElement_Link& ContextElement::link() const {
  // @@protoc_insertion_point(field_get:ContextElement.link)
  return has_link()
      ? *test_oneof_.link_
      : ::ContextElement_Link::default_instance();
}
inline ::ContextElement_Link* ContextElement::mutable_link() {
  if (!has_link()) {
    clear_test_oneof();
    set_has_link();
    test_oneof_.link_ = new ::ContextElement_Link;
  }
  // @@protoc_insertion_point(field_mutable:ContextElement.link)
  return test_oneof_.link_;
}
inline ::ContextElement_Link* ContextElement::release_link() {
  if (has_link()) {
    clear_has_test_oneof();
    ::ContextElement_Link* temp = test_oneof_.link_;
    test_oneof_.link_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void ContextElement::set_allocated_link(::ContextElement_Link* link) {
  clear_test_oneof();
  if (link) {
    set_has_link();
    test_oneof_.link_ = link;
  }
  // @@protoc_insertion_point(field_set_allocated:ContextElement.link)
}

// optional string uuid = 3;
inline void ContextElement::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ContextElement::uuid() const {
  // @@protoc_insertion_point(field_get:ContextElement.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextElement::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ContextElement.uuid)
}
inline void ContextElement::set_uuid(const char* value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ContextElement.uuid)
}
inline void ContextElement::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ContextElement.uuid)
}
inline ::std::string* ContextElement::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:ContextElement.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ContextElement::release_uuid() {
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ContextElement::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:ContextElement.uuid)
}

inline bool ContextElement::has_test_oneof() const {
  return test_oneof_case() != TEST_ONEOF_NOT_SET;
}
inline void ContextElement::clear_has_test_oneof() {
  _oneof_case_[0] = TEST_ONEOF_NOT_SET;
}
inline ContextElement::TestOneofCase ContextElement::test_oneof_case() const {
  return ContextElement::TestOneofCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_context_2eproto__INCLUDED
