// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crdt.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "crdt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace crdt {

namespace {

const ::google::protobuf::Descriptor* EmptyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BooleanResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BooleanResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* Status_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Status_reflection_ = NULL;
const ::google::protobuf::Descriptor* TypeMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TypeMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceObject_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceObject_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttachRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttachRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttachResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttachResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetachRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetachRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetachResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetachResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommitRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommitResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommitResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* EqualsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EqualsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* EqualsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EqualsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MergeRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MergeRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MergeResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MergeResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloneRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloneRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloneResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloneResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SupportedTypesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SupportedTypesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SupportedStorageTypesResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SupportedStorageTypesResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SupportedCryptoMethodsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SupportedCryptoMethodsResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetListRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetListRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetInsertRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetInsertRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetInsertResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetInsertResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetRemoveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetRemoveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetRemoveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetRemoveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetLengthRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetLengthRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetLengthResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetLengthResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetContainsRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetContainsRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* SetContainsResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SetContainsResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_crdt_2eproto() {
  protobuf_AddDesc_crdt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "crdt.proto");
  GOOGLE_CHECK(file != NULL);
  EmptyMessage_descriptor_ = file->message_type(0);
  static const int EmptyMessage_offsets_[1] = {
  };
  EmptyMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EmptyMessage_descriptor_,
      EmptyMessage::default_instance_,
      EmptyMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(EmptyMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _is_default_instance_));
  BooleanResponse_descriptor_ = file->message_type(1);
  static const int BooleanResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanResponse, value_),
  };
  BooleanResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BooleanResponse_descriptor_,
      BooleanResponse::default_instance_,
      BooleanResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(BooleanResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BooleanResponse, _is_default_instance_));
  Status_descriptor_ = file->message_type(2);
  static const int Status_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, errortype_),
  };
  Status_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Status_descriptor_,
      Status::default_instance_,
      Status_offsets_,
      -1,
      -1,
      -1,
      sizeof(Status),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Status, _is_default_instance_));
  TypeMessage_descriptor_ = file->message_type(3);
  static const int TypeMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeMessage, type_),
  };
  TypeMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TypeMessage_descriptor_,
      TypeMessage::default_instance_,
      TypeMessage_offsets_,
      -1,
      -1,
      -1,
      sizeof(TypeMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeMessage, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TypeMessage, _is_default_instance_));
  ResourceObject_descriptor_ = file->message_type(4);
  static const int ResourceObject_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceObject, referenceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceObject, object_),
  };
  ResourceObject_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ResourceObject_descriptor_,
      ResourceObject::default_instance_,
      ResourceObject_offsets_,
      -1,
      -1,
      -1,
      sizeof(ResourceObject),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceObject, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceObject, _is_default_instance_));
  CreateRequest_descriptor_ = file->message_type(5);
  static const int CreateRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequest, resourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequest, storageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequest, cryptoid_),
  };
  CreateRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateRequest_descriptor_,
      CreateRequest::default_instance_,
      CreateRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRequest, _is_default_instance_));
  CreateResponse_descriptor_ = file->message_type(6);
  static const int CreateResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateResponse, resourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateResponse, resourcekey_),
  };
  CreateResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CreateResponse_descriptor_,
      CreateResponse::default_instance_,
      CreateResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CreateResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateResponse, _is_default_instance_));
  AttachRequest_descriptor_ = file->message_type(7);
  static const int AttachRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachRequest, resourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachRequest, resourcekey_),
  };
  AttachRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AttachRequest_descriptor_,
      AttachRequest::default_instance_,
      AttachRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(AttachRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachRequest, _is_default_instance_));
  AttachResponse_descriptor_ = file->message_type(8);
  static const int AttachResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachResponse, referenceid_),
  };
  AttachResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AttachResponse_descriptor_,
      AttachResponse::default_instance_,
      AttachResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(AttachResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttachResponse, _is_default_instance_));
  DetachRequest_descriptor_ = file->message_type(9);
  static const int DetachRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetachRequest, referenceid_),
  };
  DetachRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetachRequest_descriptor_,
      DetachRequest::default_instance_,
      DetachRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(DetachRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetachRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetachRequest, _is_default_instance_));
  DetachResponse_descriptor_ = file->message_type(10);
  static const int DetachResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetachResponse, status_),
  };
  DetachResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DetachResponse_descriptor_,
      DetachResponse::default_instance_,
      DetachResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(DetachResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetachResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetachResponse, _is_default_instance_));
  CommitRequest_descriptor_ = file->message_type(11);
  static const int CommitRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, referenceid_),
  };
  CommitRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitRequest_descriptor_,
      CommitRequest::default_instance_,
      CommitRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommitRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitRequest, _is_default_instance_));
  CommitResponse_descriptor_ = file->message_type(12);
  static const int CommitResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, status_),
  };
  CommitResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CommitResponse_descriptor_,
      CommitResponse::default_instance_,
      CommitResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CommitResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommitResponse, _is_default_instance_));
  EqualsRequest_descriptor_ = file->message_type(13);
  static const int EqualsRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EqualsRequest, referenceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EqualsRequest, otherreferenceid_),
  };
  EqualsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EqualsRequest_descriptor_,
      EqualsRequest::default_instance_,
      EqualsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(EqualsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EqualsRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EqualsRequest, _is_default_instance_));
  EqualsResponse_descriptor_ = file->message_type(14);
  static const int EqualsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EqualsResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EqualsResponse, result_),
  };
  EqualsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EqualsResponse_descriptor_,
      EqualsResponse::default_instance_,
      EqualsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(EqualsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EqualsResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EqualsResponse, _is_default_instance_));
  MergeRequest_descriptor_ = file->message_type(15);
  static const int MergeRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeRequest, referenceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeRequest, otherreferenceid_),
  };
  MergeRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MergeRequest_descriptor_,
      MergeRequest::default_instance_,
      MergeRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(MergeRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeRequest, _is_default_instance_));
  MergeResponse_descriptor_ = file->message_type(16);
  static const int MergeResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeResponse, status_),
  };
  MergeResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MergeResponse_descriptor_,
      MergeResponse::default_instance_,
      MergeResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(MergeResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MergeResponse, _is_default_instance_));
  CloneRequest_descriptor_ = file->message_type(17);
  static const int CloneRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloneRequest, referenceid_),
  };
  CloneRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CloneRequest_descriptor_,
      CloneRequest::default_instance_,
      CloneRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(CloneRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloneRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloneRequest, _is_default_instance_));
  CloneResponse_descriptor_ = file->message_type(18);
  static const int CloneResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloneResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloneResponse, resourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloneResponse, resourcekey_),
  };
  CloneResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CloneResponse_descriptor_,
      CloneResponse::default_instance_,
      CloneResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(CloneResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloneResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloneResponse, _is_default_instance_));
  SupportedTypesResponse_descriptor_ = file->message_type(19);
  static const int SupportedTypesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportedTypesResponse, types_),
  };
  SupportedTypesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SupportedTypesResponse_descriptor_,
      SupportedTypesResponse::default_instance_,
      SupportedTypesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SupportedTypesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportedTypesResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportedTypesResponse, _is_default_instance_));
  SupportedStorageTypesResponse_descriptor_ = file->message_type(20);
  static const int SupportedStorageTypesResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportedStorageTypesResponse, types_),
  };
  SupportedStorageTypesResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SupportedStorageTypesResponse_descriptor_,
      SupportedStorageTypesResponse::default_instance_,
      SupportedStorageTypesResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SupportedStorageTypesResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportedStorageTypesResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportedStorageTypesResponse, _is_default_instance_));
  SupportedCryptoMethodsResponse_descriptor_ = file->message_type(21);
  static const int SupportedCryptoMethodsResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportedCryptoMethodsResponse, types_),
  };
  SupportedCryptoMethodsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SupportedCryptoMethodsResponse_descriptor_,
      SupportedCryptoMethodsResponse::default_instance_,
      SupportedCryptoMethodsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SupportedCryptoMethodsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportedCryptoMethodsResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SupportedCryptoMethodsResponse, _is_default_instance_));
  SetListRequest_descriptor_ = file->message_type(22);
  static const int SetListRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetListRequest, referenceid_),
  };
  SetListRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetListRequest_descriptor_,
      SetListRequest::default_instance_,
      SetListRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetListRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetListRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetListRequest, _is_default_instance_));
  SetInsertRequest_descriptor_ = file->message_type(23);
  static const int SetInsertRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetInsertRequest, object_),
  };
  SetInsertRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetInsertRequest_descriptor_,
      SetInsertRequest::default_instance_,
      SetInsertRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetInsertRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetInsertRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetInsertRequest, _is_default_instance_));
  SetInsertResponse_descriptor_ = file->message_type(24);
  static const int SetInsertResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetInsertResponse, status_),
  };
  SetInsertResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetInsertResponse_descriptor_,
      SetInsertResponse::default_instance_,
      SetInsertResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetInsertResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetInsertResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetInsertResponse, _is_default_instance_));
  SetRemoveRequest_descriptor_ = file->message_type(25);
  static const int SetRemoveRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveRequest, object_),
  };
  SetRemoveRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetRemoveRequest_descriptor_,
      SetRemoveRequest::default_instance_,
      SetRemoveRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetRemoveRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveRequest, _is_default_instance_));
  SetRemoveResponse_descriptor_ = file->message_type(26);
  static const int SetRemoveResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveResponse, status_),
  };
  SetRemoveResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetRemoveResponse_descriptor_,
      SetRemoveResponse::default_instance_,
      SetRemoveResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetRemoveResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetRemoveResponse, _is_default_instance_));
  SetLengthRequest_descriptor_ = file->message_type(27);
  static const int SetLengthRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLengthRequest, referenceid_),
  };
  SetLengthRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetLengthRequest_descriptor_,
      SetLengthRequest::default_instance_,
      SetLengthRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetLengthRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLengthRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLengthRequest, _is_default_instance_));
  SetLengthResponse_descriptor_ = file->message_type(28);
  static const int SetLengthResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLengthResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLengthResponse, length_),
  };
  SetLengthResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetLengthResponse_descriptor_,
      SetLengthResponse::default_instance_,
      SetLengthResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetLengthResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLengthResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetLengthResponse, _is_default_instance_));
  SetContainsRequest_descriptor_ = file->message_type(29);
  static const int SetContainsRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetContainsRequest, object_),
  };
  SetContainsRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetContainsRequest_descriptor_,
      SetContainsRequest::default_instance_,
      SetContainsRequest_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetContainsRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetContainsRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetContainsRequest, _is_default_instance_));
  SetContainsResponse_descriptor_ = file->message_type(30);
  static const int SetContainsResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetContainsResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetContainsResponse, result_),
  };
  SetContainsResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SetContainsResponse_descriptor_,
      SetContainsResponse::default_instance_,
      SetContainsResponse_offsets_,
      -1,
      -1,
      -1,
      sizeof(SetContainsResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetContainsResponse, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetContainsResponse, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_crdt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EmptyMessage_descriptor_, &EmptyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BooleanResponse_descriptor_, &BooleanResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Status_descriptor_, &Status::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TypeMessage_descriptor_, &TypeMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ResourceObject_descriptor_, &ResourceObject::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateRequest_descriptor_, &CreateRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CreateResponse_descriptor_, &CreateResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AttachRequest_descriptor_, &AttachRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AttachResponse_descriptor_, &AttachResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetachRequest_descriptor_, &DetachRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DetachResponse_descriptor_, &DetachResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitRequest_descriptor_, &CommitRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CommitResponse_descriptor_, &CommitResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EqualsRequest_descriptor_, &EqualsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EqualsResponse_descriptor_, &EqualsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MergeRequest_descriptor_, &MergeRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MergeResponse_descriptor_, &MergeResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CloneRequest_descriptor_, &CloneRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CloneResponse_descriptor_, &CloneResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SupportedTypesResponse_descriptor_, &SupportedTypesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SupportedStorageTypesResponse_descriptor_, &SupportedStorageTypesResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SupportedCryptoMethodsResponse_descriptor_, &SupportedCryptoMethodsResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetListRequest_descriptor_, &SetListRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetInsertRequest_descriptor_, &SetInsertRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetInsertResponse_descriptor_, &SetInsertResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetRemoveRequest_descriptor_, &SetRemoveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetRemoveResponse_descriptor_, &SetRemoveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetLengthRequest_descriptor_, &SetLengthRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetLengthResponse_descriptor_, &SetLengthResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetContainsRequest_descriptor_, &SetContainsRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SetContainsResponse_descriptor_, &SetContainsResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_crdt_2eproto() {
  delete EmptyMessage::default_instance_;
  delete EmptyMessage_reflection_;
  delete BooleanResponse::default_instance_;
  delete BooleanResponse_reflection_;
  delete Status::default_instance_;
  delete Status_reflection_;
  delete TypeMessage::default_instance_;
  delete TypeMessage_reflection_;
  delete ResourceObject::default_instance_;
  delete ResourceObject_reflection_;
  delete CreateRequest::default_instance_;
  delete CreateRequest_reflection_;
  delete CreateResponse::default_instance_;
  delete CreateResponse_reflection_;
  delete AttachRequest::default_instance_;
  delete AttachRequest_reflection_;
  delete AttachResponse::default_instance_;
  delete AttachResponse_reflection_;
  delete DetachRequest::default_instance_;
  delete DetachRequest_reflection_;
  delete DetachResponse::default_instance_;
  delete DetachResponse_reflection_;
  delete CommitRequest::default_instance_;
  delete CommitRequest_reflection_;
  delete CommitResponse::default_instance_;
  delete CommitResponse_reflection_;
  delete EqualsRequest::default_instance_;
  delete EqualsRequest_reflection_;
  delete EqualsResponse::default_instance_;
  delete EqualsResponse_reflection_;
  delete MergeRequest::default_instance_;
  delete MergeRequest_reflection_;
  delete MergeResponse::default_instance_;
  delete MergeResponse_reflection_;
  delete CloneRequest::default_instance_;
  delete CloneRequest_reflection_;
  delete CloneResponse::default_instance_;
  delete CloneResponse_reflection_;
  delete SupportedTypesResponse::default_instance_;
  delete SupportedTypesResponse_reflection_;
  delete SupportedStorageTypesResponse::default_instance_;
  delete SupportedStorageTypesResponse_reflection_;
  delete SupportedCryptoMethodsResponse::default_instance_;
  delete SupportedCryptoMethodsResponse_reflection_;
  delete SetListRequest::default_instance_;
  delete SetListRequest_reflection_;
  delete SetInsertRequest::default_instance_;
  delete SetInsertRequest_reflection_;
  delete SetInsertResponse::default_instance_;
  delete SetInsertResponse_reflection_;
  delete SetRemoveRequest::default_instance_;
  delete SetRemoveRequest_reflection_;
  delete SetRemoveResponse::default_instance_;
  delete SetRemoveResponse_reflection_;
  delete SetLengthRequest::default_instance_;
  delete SetLengthRequest_reflection_;
  delete SetLengthResponse::default_instance_;
  delete SetLengthResponse_reflection_;
  delete SetContainsRequest::default_instance_;
  delete SetContainsRequest_reflection_;
  delete SetContainsResponse::default_instance_;
  delete SetContainsResponse_reflection_;
}

void protobuf_AddDesc_crdt_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncrdt.proto\022\004crdt\"\016\n\014EmptyMessage\" \n\017Bo"
    "oleanResponse\022\r\n\005value\030\001 \001(\010\",\n\006Status\022\017"
    "\n\007success\030\001 \001(\010\022\021\n\terrorType\030\002 \001(\t\"\033\n\013Ty"
    "peMessage\022\014\n\004type\030\001 \001(\t\"5\n\016ResourceObjec"
    "t\022\023\n\013referenceId\030\001 \001(\t\022\016\n\006object\030\002 \001(\014\"J"
    "\n\rCreateRequest\022\024\n\014resourceType\030\001 \001(\t\022\021\n"
    "\tstorageId\030\002 \001(\t\022\020\n\010cryptoId\030\003 \001(\t\"W\n\016Cr"
    "eateResponse\022\034\n\006status\030\001 \001(\0132\014.crdt.Stat"
    "us\022\022\n\nresourceId\030\002 \001(\t\022\023\n\013resourceKey\030\003 "
    "\001(\t\"8\n\rAttachRequest\022\022\n\nresourceId\030\001 \001(\t"
    "\022\023\n\013resourceKey\030\002 \001(\t\"C\n\016AttachResponse\022"
    "\034\n\006status\030\001 \001(\0132\014.crdt.Status\022\023\n\013referen"
    "ceId\030\002 \001(\t\"$\n\rDetachRequest\022\023\n\013reference"
    "Id\030\001 \001(\t\".\n\016DetachResponse\022\034\n\006status\030\001 \001"
    "(\0132\014.crdt.Status\"$\n\rCommitRequest\022\023\n\013ref"
    "erenceId\030\001 \001(\t\".\n\016CommitResponse\022\034\n\006stat"
    "us\030\001 \001(\0132\014.crdt.Status\">\n\rEqualsRequest\022"
    "\023\n\013referenceId\030\001 \001(\t\022\030\n\020otherReferenceId"
    "\030\002 \001(\t\">\n\016EqualsResponse\022\034\n\006status\030\001 \001(\013"
    "2\014.crdt.Status\022\016\n\006result\030\002 \001(\010\"=\n\014MergeR"
    "equest\022\023\n\013referenceId\030\001 \001(\t\022\030\n\020otherRefe"
    "renceId\030\002 \001(\t\"-\n\rMergeResponse\022\034\n\006status"
    "\030\001 \001(\0132\014.crdt.Status\"#\n\014CloneRequest\022\023\n\013"
    "referenceId\030\001 \001(\t\"V\n\rCloneResponse\022\034\n\006st"
    "atus\030\001 \001(\0132\014.crdt.Status\022\022\n\nresourceId\030\002"
    " \001(\t\022\023\n\013resourceKey\030\003 \001(\t\":\n\026SupportedTy"
    "pesResponse\022 \n\005types\030\001 \003(\0132\021.crdt.TypeMe"
    "ssage\"A\n\035SupportedStorageTypesResponse\022 "
    "\n\005types\030\001 \003(\0132\021.crdt.TypeMessage\"B\n\036Supp"
    "ortedCryptoMethodsResponse\022 \n\005types\030\001 \003("
    "\0132\021.crdt.TypeMessage\"%\n\016SetListRequest\022\023"
    "\n\013referenceId\030\001 \001(\t\"8\n\020SetInsertRequest\022"
    "$\n\006object\030\001 \001(\0132\024.crdt.ResourceObject\"1\n"
    "\021SetInsertResponse\022\034\n\006status\030\001 \001(\0132\014.crd"
    "t.Status\"8\n\020SetRemoveRequest\022$\n\006object\030\001"
    " \001(\0132\024.crdt.ResourceObject\"1\n\021SetRemoveR"
    "esponse\022\034\n\006status\030\001 \001(\0132\014.crdt.Status\"\'\n"
    "\020SetLengthRequest\022\023\n\013referenceId\030\001 \001(\t\"A"
    "\n\021SetLengthResponse\022\034\n\006status\030\001 \001(\0132\014.cr"
    "dt.Status\022\016\n\006length\030\002 \001(\004\":\n\022SetContains"
    "Request\022$\n\006object\030\001 \001(\0132\024.crdt.ResourceO"
    "bject\"C\n\023SetContainsResponse\022\034\n\006status\030\001"
    " \001(\0132\014.crdt.Status\022\016\n\006result\030\002 \001(\0102\275\006\n\004C"
    "RDT\0225\n\006Create\022\023.crdt.CreateRequest\032\024.crd"
    "t.CreateResponse\"\000\0225\n\006Attach\022\023.crdt.Atta"
    "chRequest\032\024.crdt.AttachResponse\"\000\0225\n\006Det"
    "ach\022\023.crdt.DetachRequest\032\024.crdt.DetachRe"
    "sponse\"\000\0225\n\006Commit\022\023.crdt.CommitRequest\032"
    "\024.crdt.CommitResponse\"\000\0225\n\006Equals\022\023.crdt"
    ".EqualsRequest\032\024.crdt.EqualsResponse\"\000\0222"
    "\n\005Merge\022\022.crdt.MergeRequest\032\023.crdt.Merge"
    "Response\"\000\0222\n\005Clone\022\022.crdt.CloneRequest\032"
    "\023.crdt.CloneResponse\"\000\022D\n\016SupportedTypes"
    "\022\022.crdt.EmptyMessage\032\034.crdt.SupportedTyp"
    "esResponse\"\000\022=\n\017IsSupportedType\022\021.crdt.T"
    "ypeMessage\032\025.crdt.BooleanResponse\"\000\022R\n\025S"
    "upportedStorageTypes\022\022.crdt.EmptyMessage"
    "\032#.crdt.SupportedStorageTypesResponse\"\000\022"
    "D\n\026IsSupportedStorageType\022\021.crdt.TypeMes"
    "sage\032\025.crdt.BooleanResponse\"\000\022T\n\026Support"
    "edCryptoMethods\022\022.crdt.EmptyMessage\032$.cr"
    "dt.SupportedCryptoMethodsResponse\"\000\022E\n\027I"
    "sSupportedCryptoMethod\022\021.crdt.TypeMessag"
    "e\032\025.crdt.BooleanResponse\"\0002\202\002\n\013GrowOnlyS"
    "et\0226\n\004List\022\024.crdt.SetListRequest\032\024.crdt."
    "ResourceObject\"\0000\001\022;\n\006Insert\022\026.crdt.SetI"
    "nsertRequest\032\027.crdt.SetInsertResponse\"\000\022"
    ";\n\006Length\022\026.crdt.SetLengthRequest\032\027.crdt"
    ".SetLengthResponse\"\000\022A\n\010Contains\022\030.crdt."
    "SetContainsRequest\032\031.crdt.SetContainsRes"
    "ponse\"\0002\277\002\n\013TwoPhaseSet\0226\n\004List\022\024.crdt.S"
    "etListRequest\032\024.crdt.ResourceObject\"\0000\001\022"
    ";\n\006Insert\022\026.crdt.SetInsertRequest\032\027.crdt"
    ".SetInsertResponse\"\000\022;\n\006Remove\022\026.crdt.Se"
    "tRemoveRequest\032\027.crdt.SetRemoveResponse\""
    "\000\022;\n\006Length\022\026.crdt.SetLengthRequest\032\027.cr"
    "dt.SetLengthResponse\"\000\022A\n\010Contains\022\030.crd"
    "t.SetContainsRequest\032\031.crdt.SetContainsR"
    "esponse\"\000b\006proto3", 3137);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "crdt.proto", &protobuf_RegisterTypes);
  EmptyMessage::default_instance_ = new EmptyMessage();
  BooleanResponse::default_instance_ = new BooleanResponse();
  Status::default_instance_ = new Status();
  TypeMessage::default_instance_ = new TypeMessage();
  ResourceObject::default_instance_ = new ResourceObject();
  CreateRequest::default_instance_ = new CreateRequest();
  CreateResponse::default_instance_ = new CreateResponse();
  AttachRequest::default_instance_ = new AttachRequest();
  AttachResponse::default_instance_ = new AttachResponse();
  DetachRequest::default_instance_ = new DetachRequest();
  DetachResponse::default_instance_ = new DetachResponse();
  CommitRequest::default_instance_ = new CommitRequest();
  CommitResponse::default_instance_ = new CommitResponse();
  EqualsRequest::default_instance_ = new EqualsRequest();
  EqualsResponse::default_instance_ = new EqualsResponse();
  MergeRequest::default_instance_ = new MergeRequest();
  MergeResponse::default_instance_ = new MergeResponse();
  CloneRequest::default_instance_ = new CloneRequest();
  CloneResponse::default_instance_ = new CloneResponse();
  SupportedTypesResponse::default_instance_ = new SupportedTypesResponse();
  SupportedStorageTypesResponse::default_instance_ = new SupportedStorageTypesResponse();
  SupportedCryptoMethodsResponse::default_instance_ = new SupportedCryptoMethodsResponse();
  SetListRequest::default_instance_ = new SetListRequest();
  SetInsertRequest::default_instance_ = new SetInsertRequest();
  SetInsertResponse::default_instance_ = new SetInsertResponse();
  SetRemoveRequest::default_instance_ = new SetRemoveRequest();
  SetRemoveResponse::default_instance_ = new SetRemoveResponse();
  SetLengthRequest::default_instance_ = new SetLengthRequest();
  SetLengthResponse::default_instance_ = new SetLengthResponse();
  SetContainsRequest::default_instance_ = new SetContainsRequest();
  SetContainsResponse::default_instance_ = new SetContainsResponse();
  EmptyMessage::default_instance_->InitAsDefaultInstance();
  BooleanResponse::default_instance_->InitAsDefaultInstance();
  Status::default_instance_->InitAsDefaultInstance();
  TypeMessage::default_instance_->InitAsDefaultInstance();
  ResourceObject::default_instance_->InitAsDefaultInstance();
  CreateRequest::default_instance_->InitAsDefaultInstance();
  CreateResponse::default_instance_->InitAsDefaultInstance();
  AttachRequest::default_instance_->InitAsDefaultInstance();
  AttachResponse::default_instance_->InitAsDefaultInstance();
  DetachRequest::default_instance_->InitAsDefaultInstance();
  DetachResponse::default_instance_->InitAsDefaultInstance();
  CommitRequest::default_instance_->InitAsDefaultInstance();
  CommitResponse::default_instance_->InitAsDefaultInstance();
  EqualsRequest::default_instance_->InitAsDefaultInstance();
  EqualsResponse::default_instance_->InitAsDefaultInstance();
  MergeRequest::default_instance_->InitAsDefaultInstance();
  MergeResponse::default_instance_->InitAsDefaultInstance();
  CloneRequest::default_instance_->InitAsDefaultInstance();
  CloneResponse::default_instance_->InitAsDefaultInstance();
  SupportedTypesResponse::default_instance_->InitAsDefaultInstance();
  SupportedStorageTypesResponse::default_instance_->InitAsDefaultInstance();
  SupportedCryptoMethodsResponse::default_instance_->InitAsDefaultInstance();
  SetListRequest::default_instance_->InitAsDefaultInstance();
  SetInsertRequest::default_instance_->InitAsDefaultInstance();
  SetInsertResponse::default_instance_->InitAsDefaultInstance();
  SetRemoveRequest::default_instance_->InitAsDefaultInstance();
  SetRemoveResponse::default_instance_->InitAsDefaultInstance();
  SetLengthRequest::default_instance_->InitAsDefaultInstance();
  SetLengthResponse::default_instance_->InitAsDefaultInstance();
  SetContainsRequest::default_instance_->InitAsDefaultInstance();
  SetContainsResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_crdt_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_crdt_2eproto {
  StaticDescriptorInitializer_crdt_2eproto() {
    protobuf_AddDesc_crdt_2eproto();
  }
} static_descriptor_initializer_crdt_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmptyMessage::EmptyMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.EmptyMessage)
}

void EmptyMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EmptyMessage::EmptyMessage(const EmptyMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.EmptyMessage)
}

void EmptyMessage::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

EmptyMessage::~EmptyMessage() {
  // @@protoc_insertion_point(destructor:crdt.EmptyMessage)
  SharedDtor();
}

void EmptyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmptyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyMessage_descriptor_;
}

const EmptyMessage& EmptyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

EmptyMessage* EmptyMessage::default_instance_ = NULL;

EmptyMessage* EmptyMessage::New(::google::protobuf::Arena* arena) const {
  EmptyMessage* n = new EmptyMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmptyMessage::Clear() {
}

bool EmptyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.EmptyMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.EmptyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.EmptyMessage)
  return false;
#undef DO_
}

void EmptyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.EmptyMessage)
  // @@protoc_insertion_point(serialize_end:crdt.EmptyMessage)
}

::google::protobuf::uint8* EmptyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.EmptyMessage)
  // @@protoc_insertion_point(serialize_to_array_end:crdt.EmptyMessage)
  return target;
}

int EmptyMessage::ByteSize() const {
  int total_size = 0;

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EmptyMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EmptyMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmptyMessage::MergeFrom(const EmptyMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
}

void EmptyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyMessage::CopyFrom(const EmptyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMessage::IsInitialized() const {

  return true;
}

void EmptyMessage::Swap(EmptyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmptyMessage::InternalSwap(EmptyMessage* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmptyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyMessage_descriptor_;
  metadata.reflection = EmptyMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmptyMessage

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BooleanResponse::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BooleanResponse::BooleanResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.BooleanResponse)
}

void BooleanResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BooleanResponse::BooleanResponse(const BooleanResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.BooleanResponse)
}

void BooleanResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  value_ = false;
}

BooleanResponse::~BooleanResponse() {
  // @@protoc_insertion_point(destructor:crdt.BooleanResponse)
  SharedDtor();
}

void BooleanResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BooleanResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BooleanResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BooleanResponse_descriptor_;
}

const BooleanResponse& BooleanResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

BooleanResponse* BooleanResponse::default_instance_ = NULL;

BooleanResponse* BooleanResponse::New(::google::protobuf::Arena* arena) const {
  BooleanResponse* n = new BooleanResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BooleanResponse::Clear() {
  value_ = false;
}

bool BooleanResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.BooleanResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool value = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.BooleanResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.BooleanResponse)
  return false;
#undef DO_
}

void BooleanResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.BooleanResponse)
  // optional bool value = 1;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.BooleanResponse)
}

::google::protobuf::uint8* BooleanResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.BooleanResponse)
  // optional bool value = 1;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.BooleanResponse)
  return target;
}

int BooleanResponse::ByteSize() const {
  int total_size = 0;

  // optional bool value = 1;
  if (this->value() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BooleanResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BooleanResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BooleanResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BooleanResponse::MergeFrom(const BooleanResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void BooleanResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BooleanResponse::CopyFrom(const BooleanResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BooleanResponse::IsInitialized() const {

  return true;
}

void BooleanResponse::Swap(BooleanResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BooleanResponse::InternalSwap(BooleanResponse* other) {
  std::swap(value_, other->value_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BooleanResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BooleanResponse_descriptor_;
  metadata.reflection = BooleanResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BooleanResponse

// optional bool value = 1;
void BooleanResponse::clear_value() {
  value_ = false;
}
 bool BooleanResponse::value() const {
  // @@protoc_insertion_point(field_get:crdt.BooleanResponse.value)
  return value_;
}
 void BooleanResponse::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:crdt.BooleanResponse.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Status::kSuccessFieldNumber;
const int Status::kErrorTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Status::Status()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.Status)
}

void Status::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Status::Status(const Status& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.Status)
}

void Status::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  success_ = false;
  errortype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Status::~Status() {
  // @@protoc_insertion_point(destructor:crdt.Status)
  SharedDtor();
}

void Status::SharedDtor() {
  errortype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Status::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Status::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Status_descriptor_;
}

const Status& Status::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

Status* Status::default_instance_ = NULL;

Status* Status::New(::google::protobuf::Arena* arena) const {
  Status* n = new Status;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Status::Clear() {
  success_ = false;
  errortype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Status::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.Status)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_errorType;
        break;
      }

      // optional string errorType = 2;
      case 2: {
        if (tag == 18) {
         parse_errorType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errortype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errortype().data(), this->errortype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.Status.errorType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.Status)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.Status)
  return false;
#undef DO_
}

void Status::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.Status)
  // optional bool success = 1;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional string errorType = 2;
  if (this->errortype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errortype().data(), this->errortype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.Status.errorType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->errortype(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.Status)
}

::google::protobuf::uint8* Status::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.Status)
  // optional bool success = 1;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional string errorType = 2;
  if (this->errortype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errortype().data(), this->errortype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.Status.errorType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->errortype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.Status)
  return target;
}

int Status::ByteSize() const {
  int total_size = 0;

  // optional bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // optional string errorType = 2;
  if (this->errortype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errortype());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Status::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Status* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Status>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Status::MergeFrom(const Status& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.errortype().size() > 0) {

    errortype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errortype_);
  }
}

void Status::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Status::CopyFrom(const Status& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Status::IsInitialized() const {

  return true;
}

void Status::Swap(Status* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Status::InternalSwap(Status* other) {
  std::swap(success_, other->success_);
  errortype_.Swap(&other->errortype_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Status::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Status_descriptor_;
  metadata.reflection = Status_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Status

// optional bool success = 1;
void Status::clear_success() {
  success_ = false;
}
 bool Status::success() const {
  // @@protoc_insertion_point(field_get:crdt.Status.success)
  return success_;
}
 void Status::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:crdt.Status.success)
}

// optional string errorType = 2;
void Status::clear_errortype() {
  errortype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Status::errortype() const {
  // @@protoc_insertion_point(field_get:crdt.Status.errorType)
  return errortype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_errortype(const ::std::string& value) {
  
  errortype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.Status.errorType)
}
 void Status::set_errortype(const char* value) {
  
  errortype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.Status.errorType)
}
 void Status::set_errortype(const char* value, size_t size) {
  
  errortype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.Status.errorType)
}
 ::std::string* Status::mutable_errortype() {
  
  // @@protoc_insertion_point(field_mutable:crdt.Status.errorType)
  return errortype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Status::release_errortype() {
  
  return errortype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Status::set_allocated_errortype(::std::string* errortype) {
  if (errortype != NULL) {
    
  } else {
    
  }
  errortype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errortype);
  // @@protoc_insertion_point(field_set_allocated:crdt.Status.errorType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TypeMessage::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TypeMessage::TypeMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.TypeMessage)
}

void TypeMessage::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TypeMessage::TypeMessage(const TypeMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.TypeMessage)
}

void TypeMessage::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TypeMessage::~TypeMessage() {
  // @@protoc_insertion_point(destructor:crdt.TypeMessage)
  SharedDtor();
}

void TypeMessage::SharedDtor() {
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TypeMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TypeMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TypeMessage_descriptor_;
}

const TypeMessage& TypeMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

TypeMessage* TypeMessage::default_instance_ = NULL;

TypeMessage* TypeMessage::New(::google::protobuf::Arena* arena) const {
  TypeMessage* n = new TypeMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TypeMessage::Clear() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TypeMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.TypeMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string type = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.TypeMessage.type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.TypeMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.TypeMessage)
  return false;
#undef DO_
}

void TypeMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.TypeMessage)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.TypeMessage.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.TypeMessage)
}

::google::protobuf::uint8* TypeMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.TypeMessage)
  // optional string type = 1;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.TypeMessage.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.TypeMessage)
  return target;
}

int TypeMessage::ByteSize() const {
  int total_size = 0;

  // optional string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TypeMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TypeMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TypeMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TypeMessage::MergeFrom(const TypeMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
}

void TypeMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TypeMessage::CopyFrom(const TypeMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeMessage::IsInitialized() const {

  return true;
}

void TypeMessage::Swap(TypeMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TypeMessage::InternalSwap(TypeMessage* other) {
  type_.Swap(&other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TypeMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TypeMessage_descriptor_;
  metadata.reflection = TypeMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TypeMessage

// optional string type = 1;
void TypeMessage::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TypeMessage::type() const {
  // @@protoc_insertion_point(field_get:crdt.TypeMessage.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TypeMessage::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.TypeMessage.type)
}
 void TypeMessage::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.TypeMessage.type)
}
 void TypeMessage::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.TypeMessage.type)
}
 ::std::string* TypeMessage::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:crdt.TypeMessage.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TypeMessage::release_type() {
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TypeMessage::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:crdt.TypeMessage.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResourceObject::kReferenceIdFieldNumber;
const int ResourceObject::kObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResourceObject::ResourceObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.ResourceObject)
}

void ResourceObject::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ResourceObject::ResourceObject(const ResourceObject& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.ResourceObject)
}

void ResourceObject::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  referenceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ResourceObject::~ResourceObject() {
  // @@protoc_insertion_point(destructor:crdt.ResourceObject)
  SharedDtor();
}

void ResourceObject::SharedDtor() {
  referenceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ResourceObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceObject::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceObject_descriptor_;
}

const ResourceObject& ResourceObject::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

ResourceObject* ResourceObject::default_instance_ = NULL;

ResourceObject* ResourceObject::New(::google::protobuf::Arena* arena) const {
  ResourceObject* n = new ResourceObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResourceObject::Clear() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ResourceObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.ResourceObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string referenceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referenceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->referenceid().data(), this->referenceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.ResourceObject.referenceId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_object;
        break;
      }

      // optional bytes object = 2;
      case 2: {
        if (tag == 18) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.ResourceObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.ResourceObject)
  return false;
#undef DO_
}

void ResourceObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.ResourceObject)
  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.ResourceObject.referenceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->referenceid(), output);
  }

  // optional bytes object = 2;
  if (this->object().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->object(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.ResourceObject)
}

::google::protobuf::uint8* ResourceObject::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.ResourceObject)
  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.ResourceObject.referenceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->referenceid(), target);
  }

  // optional bytes object = 2;
  if (this->object().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->object(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.ResourceObject)
  return target;
}

int ResourceObject::ByteSize() const {
  int total_size = 0;

  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->referenceid());
  }

  // optional bytes object = 2;
  if (this->object().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->object());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceObject::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ResourceObject* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ResourceObject>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceObject::MergeFrom(const ResourceObject& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.referenceid().size() > 0) {

    referenceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referenceid_);
  }
  if (from.object().size() > 0) {

    object_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.object_);
  }
}

void ResourceObject::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceObject::CopyFrom(const ResourceObject& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceObject::IsInitialized() const {

  return true;
}

void ResourceObject::Swap(ResourceObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResourceObject::InternalSwap(ResourceObject* other) {
  referenceid_.Swap(&other->referenceid_);
  object_.Swap(&other->object_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResourceObject::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceObject_descriptor_;
  metadata.reflection = ResourceObject_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResourceObject

// optional string referenceId = 1;
void ResourceObject::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResourceObject::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.ResourceObject.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceObject::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.ResourceObject.referenceId)
}
 void ResourceObject::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.ResourceObject.referenceId)
}
 void ResourceObject::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.ResourceObject.referenceId)
}
 ::std::string* ResourceObject::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.ResourceObject.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResourceObject::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceObject::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.ResourceObject.referenceId)
}

// optional bytes object = 2;
void ResourceObject::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ResourceObject::object() const {
  // @@protoc_insertion_point(field_get:crdt.ResourceObject.object)
  return object_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceObject::set_object(const ::std::string& value) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.ResourceObject.object)
}
 void ResourceObject::set_object(const char* value) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.ResourceObject.object)
}
 void ResourceObject::set_object(const void* value, size_t size) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.ResourceObject.object)
}
 ::std::string* ResourceObject::mutable_object() {
  
  // @@protoc_insertion_point(field_mutable:crdt.ResourceObject.object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ResourceObject::release_object() {
  
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ResourceObject::set_allocated_object(::std::string* object) {
  if (object != NULL) {
    
  } else {
    
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:crdt.ResourceObject.object)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRequest::kResourceTypeFieldNumber;
const int CreateRequest::kStorageIdFieldNumber;
const int CreateRequest::kCryptoIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRequest::CreateRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.CreateRequest)
}

void CreateRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CreateRequest::CreateRequest(const CreateRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.CreateRequest)
}

void CreateRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resourcetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storageid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cryptoid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreateRequest::~CreateRequest() {
  // @@protoc_insertion_point(destructor:crdt.CreateRequest)
  SharedDtor();
}

void CreateRequest::SharedDtor() {
  resourcetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storageid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cryptoid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CreateRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRequest_descriptor_;
}

const CreateRequest& CreateRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

CreateRequest* CreateRequest::default_instance_ = NULL;

CreateRequest* CreateRequest::New(::google::protobuf::Arena* arena) const {
  CreateRequest* n = new CreateRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateRequest::Clear() {
  resourcetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  storageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cryptoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.CreateRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string resourceType = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourcetype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resourcetype().data(), this->resourcetype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.CreateRequest.resourceType"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_storageId;
        break;
      }

      // optional string storageId = 2;
      case 2: {
        if (tag == 18) {
         parse_storageId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_storageid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->storageid().data(), this->storageid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.CreateRequest.storageId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cryptoId;
        break;
      }

      // optional string cryptoId = 3;
      case 3: {
        if (tag == 26) {
         parse_cryptoId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cryptoid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->cryptoid().data(), this->cryptoid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.CreateRequest.cryptoId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.CreateRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.CreateRequest)
  return false;
#undef DO_
}

void CreateRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.CreateRequest)
  // optional string resourceType = 1;
  if (this->resourcetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourcetype().data(), this->resourcetype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CreateRequest.resourceType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->resourcetype(), output);
  }

  // optional string storageId = 2;
  if (this->storageid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->storageid().data(), this->storageid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CreateRequest.storageId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->storageid(), output);
  }

  // optional string cryptoId = 3;
  if (this->cryptoid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cryptoid().data(), this->cryptoid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CreateRequest.cryptoId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->cryptoid(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.CreateRequest)
}

::google::protobuf::uint8* CreateRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.CreateRequest)
  // optional string resourceType = 1;
  if (this->resourcetype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourcetype().data(), this->resourcetype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CreateRequest.resourceType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resourcetype(), target);
  }

  // optional string storageId = 2;
  if (this->storageid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->storageid().data(), this->storageid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CreateRequest.storageId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->storageid(), target);
  }

  // optional string cryptoId = 3;
  if (this->cryptoid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->cryptoid().data(), this->cryptoid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CreateRequest.cryptoId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->cryptoid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.CreateRequest)
  return target;
}

int CreateRequest::ByteSize() const {
  int total_size = 0;

  // optional string resourceType = 1;
  if (this->resourcetype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resourcetype());
  }

  // optional string storageId = 2;
  if (this->storageid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->storageid());
  }

  // optional string cryptoId = 3;
  if (this->cryptoid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->cryptoid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRequest::MergeFrom(const CreateRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.resourcetype().size() > 0) {

    resourcetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resourcetype_);
  }
  if (from.storageid().size() > 0) {

    storageid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.storageid_);
  }
  if (from.cryptoid().size() > 0) {

    cryptoid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cryptoid_);
  }
}

void CreateRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRequest::CopyFrom(const CreateRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRequest::IsInitialized() const {

  return true;
}

void CreateRequest::Swap(CreateRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateRequest::InternalSwap(CreateRequest* other) {
  resourcetype_.Swap(&other->resourcetype_);
  storageid_.Swap(&other->storageid_);
  cryptoid_.Swap(&other->cryptoid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRequest_descriptor_;
  metadata.reflection = CreateRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateRequest

// optional string resourceType = 1;
void CreateRequest::clear_resourcetype() {
  resourcetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateRequest::resourcetype() const {
  // @@protoc_insertion_point(field_get:crdt.CreateRequest.resourceType)
  return resourcetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRequest::set_resourcetype(const ::std::string& value) {
  
  resourcetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CreateRequest.resourceType)
}
 void CreateRequest::set_resourcetype(const char* value) {
  
  resourcetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CreateRequest.resourceType)
}
 void CreateRequest::set_resourcetype(const char* value, size_t size) {
  
  resourcetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CreateRequest.resourceType)
}
 ::std::string* CreateRequest::mutable_resourcetype() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CreateRequest.resourceType)
  return resourcetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateRequest::release_resourcetype() {
  
  return resourcetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRequest::set_allocated_resourcetype(::std::string* resourcetype) {
  if (resourcetype != NULL) {
    
  } else {
    
  }
  resourcetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourcetype);
  // @@protoc_insertion_point(field_set_allocated:crdt.CreateRequest.resourceType)
}

// optional string storageId = 2;
void CreateRequest::clear_storageid() {
  storageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateRequest::storageid() const {
  // @@protoc_insertion_point(field_get:crdt.CreateRequest.storageId)
  return storageid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRequest::set_storageid(const ::std::string& value) {
  
  storageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CreateRequest.storageId)
}
 void CreateRequest::set_storageid(const char* value) {
  
  storageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CreateRequest.storageId)
}
 void CreateRequest::set_storageid(const char* value, size_t size) {
  
  storageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CreateRequest.storageId)
}
 ::std::string* CreateRequest::mutable_storageid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CreateRequest.storageId)
  return storageid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateRequest::release_storageid() {
  
  return storageid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRequest::set_allocated_storageid(::std::string* storageid) {
  if (storageid != NULL) {
    
  } else {
    
  }
  storageid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storageid);
  // @@protoc_insertion_point(field_set_allocated:crdt.CreateRequest.storageId)
}

// optional string cryptoId = 3;
void CreateRequest::clear_cryptoid() {
  cryptoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateRequest::cryptoid() const {
  // @@protoc_insertion_point(field_get:crdt.CreateRequest.cryptoId)
  return cryptoid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRequest::set_cryptoid(const ::std::string& value) {
  
  cryptoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CreateRequest.cryptoId)
}
 void CreateRequest::set_cryptoid(const char* value) {
  
  cryptoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CreateRequest.cryptoId)
}
 void CreateRequest::set_cryptoid(const char* value, size_t size) {
  
  cryptoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CreateRequest.cryptoId)
}
 ::std::string* CreateRequest::mutable_cryptoid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CreateRequest.cryptoId)
  return cryptoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateRequest::release_cryptoid() {
  
  return cryptoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateRequest::set_allocated_cryptoid(::std::string* cryptoid) {
  if (cryptoid != NULL) {
    
  } else {
    
  }
  cryptoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cryptoid);
  // @@protoc_insertion_point(field_set_allocated:crdt.CreateRequest.cryptoId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateResponse::kStatusFieldNumber;
const int CreateResponse::kResourceIdFieldNumber;
const int CreateResponse::kResourceKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateResponse::CreateResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.CreateResponse)
}

void CreateResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::crdt::Status*>(&::crdt::Status::default_instance());
}

CreateResponse::CreateResponse(const CreateResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.CreateResponse)
}

void CreateResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = NULL;
  resourceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourcekey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CreateResponse::~CreateResponse() {
  // @@protoc_insertion_point(destructor:crdt.CreateResponse)
  SharedDtor();
}

void CreateResponse::SharedDtor() {
  resourceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourcekey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete status_;
  }
}

void CreateResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateResponse_descriptor_;
}

const CreateResponse& CreateResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

CreateResponse* CreateResponse::default_instance_ = NULL;

CreateResponse* CreateResponse::New(::google::protobuf::Arena* arena) const {
  CreateResponse* n = new CreateResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
  resourceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourcekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.CreateResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crdt.Status status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resourceId;
        break;
      }

      // optional string resourceId = 2;
      case 2: {
        if (tag == 18) {
         parse_resourceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resourceid().data(), this->resourceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.CreateResponse.resourceId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resourceKey;
        break;
      }

      // optional string resourceKey = 3;
      case 3: {
        if (tag == 26) {
         parse_resourceKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourcekey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resourcekey().data(), this->resourcekey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.CreateResponse.resourceKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.CreateResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.CreateResponse)
  return false;
#undef DO_
}

void CreateResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.CreateResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // optional string resourceId = 2;
  if (this->resourceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourceid().data(), this->resourceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CreateResponse.resourceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resourceid(), output);
  }

  // optional string resourceKey = 3;
  if (this->resourcekey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourcekey().data(), this->resourcekey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CreateResponse.resourceKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resourcekey(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.CreateResponse)
}

::google::protobuf::uint8* CreateResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.CreateResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->status_, target);
  }

  // optional string resourceId = 2;
  if (this->resourceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourceid().data(), this->resourceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CreateResponse.resourceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resourceid(), target);
  }

  // optional string resourceKey = 3;
  if (this->resourcekey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourcekey().data(), this->resourcekey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CreateResponse.resourceKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resourcekey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.CreateResponse)
  return target;
}

int CreateResponse::ByteSize() const {
  int total_size = 0;

  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // optional string resourceId = 2;
  if (this->resourceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resourceid());
  }

  // optional string resourceKey = 3;
  if (this->resourcekey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resourcekey());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CreateResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateResponse::MergeFrom(const CreateResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_status()) {
    mutable_status()->::crdt::Status::MergeFrom(from.status());
  }
  if (from.resourceid().size() > 0) {

    resourceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resourceid_);
  }
  if (from.resourcekey().size() > 0) {

    resourcekey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resourcekey_);
  }
}

void CreateResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateResponse::CopyFrom(const CreateResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateResponse::IsInitialized() const {

  return true;
}

void CreateResponse::Swap(CreateResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateResponse::InternalSwap(CreateResponse* other) {
  std::swap(status_, other->status_);
  resourceid_.Swap(&other->resourceid_);
  resourcekey_.Swap(&other->resourcekey_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateResponse_descriptor_;
  metadata.reflection = CreateResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateResponse

// optional .crdt.Status status = 1;
bool CreateResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void CreateResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::crdt::Status& CreateResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.CreateResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::crdt::Status* CreateResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.CreateResponse.status)
  return status_;
}
::crdt::Status* CreateResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void CreateResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.CreateResponse.status)
}

// optional string resourceId = 2;
void CreateResponse::clear_resourceid() {
  resourceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateResponse::resourceid() const {
  // @@protoc_insertion_point(field_get:crdt.CreateResponse.resourceId)
  return resourceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateResponse::set_resourceid(const ::std::string& value) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CreateResponse.resourceId)
}
 void CreateResponse::set_resourceid(const char* value) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CreateResponse.resourceId)
}
 void CreateResponse::set_resourceid(const char* value, size_t size) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CreateResponse.resourceId)
}
 ::std::string* CreateResponse::mutable_resourceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CreateResponse.resourceId)
  return resourceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateResponse::release_resourceid() {
  
  return resourceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateResponse::set_allocated_resourceid(::std::string* resourceid) {
  if (resourceid != NULL) {
    
  } else {
    
  }
  resourceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.CreateResponse.resourceId)
}

// optional string resourceKey = 3;
void CreateResponse::clear_resourcekey() {
  resourcekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CreateResponse::resourcekey() const {
  // @@protoc_insertion_point(field_get:crdt.CreateResponse.resourceKey)
  return resourcekey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateResponse::set_resourcekey(const ::std::string& value) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CreateResponse.resourceKey)
}
 void CreateResponse::set_resourcekey(const char* value) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CreateResponse.resourceKey)
}
 void CreateResponse::set_resourcekey(const char* value, size_t size) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CreateResponse.resourceKey)
}
 ::std::string* CreateResponse::mutable_resourcekey() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CreateResponse.resourceKey)
  return resourcekey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CreateResponse::release_resourcekey() {
  
  return resourcekey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CreateResponse::set_allocated_resourcekey(::std::string* resourcekey) {
  if (resourcekey != NULL) {
    
  } else {
    
  }
  resourcekey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourcekey);
  // @@protoc_insertion_point(field_set_allocated:crdt.CreateResponse.resourceKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttachRequest::kResourceIdFieldNumber;
const int AttachRequest::kResourceKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AttachRequest::AttachRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.AttachRequest)
}

void AttachRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

AttachRequest::AttachRequest(const AttachRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.AttachRequest)
}

void AttachRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  resourceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourcekey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AttachRequest::~AttachRequest() {
  // @@protoc_insertion_point(destructor:crdt.AttachRequest)
  SharedDtor();
}

void AttachRequest::SharedDtor() {
  resourceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourcekey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void AttachRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttachRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttachRequest_descriptor_;
}

const AttachRequest& AttachRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

AttachRequest* AttachRequest::default_instance_ = NULL;

AttachRequest* AttachRequest::New(::google::protobuf::Arena* arena) const {
  AttachRequest* n = new AttachRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AttachRequest::Clear() {
  resourceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourcekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AttachRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.AttachRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string resourceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resourceid().data(), this->resourceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.AttachRequest.resourceId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resourceKey;
        break;
      }

      // optional string resourceKey = 2;
      case 2: {
        if (tag == 18) {
         parse_resourceKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourcekey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resourcekey().data(), this->resourcekey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.AttachRequest.resourceKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.AttachRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.AttachRequest)
  return false;
#undef DO_
}

void AttachRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.AttachRequest)
  // optional string resourceId = 1;
  if (this->resourceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourceid().data(), this->resourceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.AttachRequest.resourceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->resourceid(), output);
  }

  // optional string resourceKey = 2;
  if (this->resourcekey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourcekey().data(), this->resourcekey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.AttachRequest.resourceKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resourcekey(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.AttachRequest)
}

::google::protobuf::uint8* AttachRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.AttachRequest)
  // optional string resourceId = 1;
  if (this->resourceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourceid().data(), this->resourceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.AttachRequest.resourceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->resourceid(), target);
  }

  // optional string resourceKey = 2;
  if (this->resourcekey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourcekey().data(), this->resourcekey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.AttachRequest.resourceKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resourcekey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.AttachRequest)
  return target;
}

int AttachRequest::ByteSize() const {
  int total_size = 0;

  // optional string resourceId = 1;
  if (this->resourceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resourceid());
  }

  // optional string resourceKey = 2;
  if (this->resourcekey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resourcekey());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttachRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AttachRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AttachRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttachRequest::MergeFrom(const AttachRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.resourceid().size() > 0) {

    resourceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resourceid_);
  }
  if (from.resourcekey().size() > 0) {

    resourcekey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resourcekey_);
  }
}

void AttachRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttachRequest::CopyFrom(const AttachRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachRequest::IsInitialized() const {

  return true;
}

void AttachRequest::Swap(AttachRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AttachRequest::InternalSwap(AttachRequest* other) {
  resourceid_.Swap(&other->resourceid_);
  resourcekey_.Swap(&other->resourcekey_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AttachRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttachRequest_descriptor_;
  metadata.reflection = AttachRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AttachRequest

// optional string resourceId = 1;
void AttachRequest::clear_resourceid() {
  resourceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AttachRequest::resourceid() const {
  // @@protoc_insertion_point(field_get:crdt.AttachRequest.resourceId)
  return resourceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AttachRequest::set_resourceid(const ::std::string& value) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.AttachRequest.resourceId)
}
 void AttachRequest::set_resourceid(const char* value) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.AttachRequest.resourceId)
}
 void AttachRequest::set_resourceid(const char* value, size_t size) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.AttachRequest.resourceId)
}
 ::std::string* AttachRequest::mutable_resourceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.AttachRequest.resourceId)
  return resourceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AttachRequest::release_resourceid() {
  
  return resourceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AttachRequest::set_allocated_resourceid(::std::string* resourceid) {
  if (resourceid != NULL) {
    
  } else {
    
  }
  resourceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.AttachRequest.resourceId)
}

// optional string resourceKey = 2;
void AttachRequest::clear_resourcekey() {
  resourcekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AttachRequest::resourcekey() const {
  // @@protoc_insertion_point(field_get:crdt.AttachRequest.resourceKey)
  return resourcekey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AttachRequest::set_resourcekey(const ::std::string& value) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.AttachRequest.resourceKey)
}
 void AttachRequest::set_resourcekey(const char* value) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.AttachRequest.resourceKey)
}
 void AttachRequest::set_resourcekey(const char* value, size_t size) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.AttachRequest.resourceKey)
}
 ::std::string* AttachRequest::mutable_resourcekey() {
  
  // @@protoc_insertion_point(field_mutable:crdt.AttachRequest.resourceKey)
  return resourcekey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AttachRequest::release_resourcekey() {
  
  return resourcekey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AttachRequest::set_allocated_resourcekey(::std::string* resourcekey) {
  if (resourcekey != NULL) {
    
  } else {
    
  }
  resourcekey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourcekey);
  // @@protoc_insertion_point(field_set_allocated:crdt.AttachRequest.resourceKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AttachResponse::kStatusFieldNumber;
const int AttachResponse::kReferenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AttachResponse::AttachResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.AttachResponse)
}

void AttachResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::crdt::Status*>(&::crdt::Status::default_instance());
}

AttachResponse::AttachResponse(const AttachResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.AttachResponse)
}

void AttachResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = NULL;
  referenceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AttachResponse::~AttachResponse() {
  // @@protoc_insertion_point(destructor:crdt.AttachResponse)
  SharedDtor();
}

void AttachResponse::SharedDtor() {
  referenceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete status_;
  }
}

void AttachResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttachResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttachResponse_descriptor_;
}

const AttachResponse& AttachResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

AttachResponse* AttachResponse::default_instance_ = NULL;

AttachResponse* AttachResponse::New(::google::protobuf::Arena* arena) const {
  AttachResponse* n = new AttachResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AttachResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool AttachResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.AttachResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crdt.Status status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_referenceId;
        break;
      }

      // optional string referenceId = 2;
      case 2: {
        if (tag == 18) {
         parse_referenceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referenceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->referenceid().data(), this->referenceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.AttachResponse.referenceId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.AttachResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.AttachResponse)
  return false;
#undef DO_
}

void AttachResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.AttachResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // optional string referenceId = 2;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.AttachResponse.referenceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->referenceid(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.AttachResponse)
}

::google::protobuf::uint8* AttachResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.AttachResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->status_, target);
  }

  // optional string referenceId = 2;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.AttachResponse.referenceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->referenceid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.AttachResponse)
  return target;
}

int AttachResponse::ByteSize() const {
  int total_size = 0;

  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // optional string referenceId = 2;
  if (this->referenceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->referenceid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttachResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AttachResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AttachResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttachResponse::MergeFrom(const AttachResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_status()) {
    mutable_status()->::crdt::Status::MergeFrom(from.status());
  }
  if (from.referenceid().size() > 0) {

    referenceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referenceid_);
  }
}

void AttachResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttachResponse::CopyFrom(const AttachResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttachResponse::IsInitialized() const {

  return true;
}

void AttachResponse::Swap(AttachResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AttachResponse::InternalSwap(AttachResponse* other) {
  std::swap(status_, other->status_);
  referenceid_.Swap(&other->referenceid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AttachResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttachResponse_descriptor_;
  metadata.reflection = AttachResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AttachResponse

// optional .crdt.Status status = 1;
bool AttachResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void AttachResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::crdt::Status& AttachResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.AttachResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::crdt::Status* AttachResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.AttachResponse.status)
  return status_;
}
::crdt::Status* AttachResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void AttachResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.AttachResponse.status)
}

// optional string referenceId = 2;
void AttachResponse::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& AttachResponse::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.AttachResponse.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AttachResponse::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.AttachResponse.referenceId)
}
 void AttachResponse::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.AttachResponse.referenceId)
}
 void AttachResponse::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.AttachResponse.referenceId)
}
 ::std::string* AttachResponse::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.AttachResponse.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* AttachResponse::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void AttachResponse::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.AttachResponse.referenceId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetachRequest::kReferenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetachRequest::DetachRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.DetachRequest)
}

void DetachRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DetachRequest::DetachRequest(const DetachRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.DetachRequest)
}

void DetachRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  referenceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DetachRequest::~DetachRequest() {
  // @@protoc_insertion_point(destructor:crdt.DetachRequest)
  SharedDtor();
}

void DetachRequest::SharedDtor() {
  referenceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DetachRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetachRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetachRequest_descriptor_;
}

const DetachRequest& DetachRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

DetachRequest* DetachRequest::default_instance_ = NULL;

DetachRequest* DetachRequest::New(::google::protobuf::Arena* arena) const {
  DetachRequest* n = new DetachRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetachRequest::Clear() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DetachRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.DetachRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string referenceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referenceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->referenceid().data(), this->referenceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.DetachRequest.referenceId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.DetachRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.DetachRequest)
  return false;
#undef DO_
}

void DetachRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.DetachRequest)
  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.DetachRequest.referenceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->referenceid(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.DetachRequest)
}

::google::protobuf::uint8* DetachRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.DetachRequest)
  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.DetachRequest.referenceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->referenceid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.DetachRequest)
  return target;
}

int DetachRequest::ByteSize() const {
  int total_size = 0;

  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->referenceid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetachRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DetachRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetachRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetachRequest::MergeFrom(const DetachRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.referenceid().size() > 0) {

    referenceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referenceid_);
  }
}

void DetachRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetachRequest::CopyFrom(const DetachRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetachRequest::IsInitialized() const {

  return true;
}

void DetachRequest::Swap(DetachRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetachRequest::InternalSwap(DetachRequest* other) {
  referenceid_.Swap(&other->referenceid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetachRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetachRequest_descriptor_;
  metadata.reflection = DetachRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetachRequest

// optional string referenceId = 1;
void DetachRequest::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& DetachRequest::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.DetachRequest.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DetachRequest::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.DetachRequest.referenceId)
}
 void DetachRequest::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.DetachRequest.referenceId)
}
 void DetachRequest::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.DetachRequest.referenceId)
}
 ::std::string* DetachRequest::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.DetachRequest.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DetachRequest::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DetachRequest::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.DetachRequest.referenceId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DetachResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DetachResponse::DetachResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.DetachResponse)
}

void DetachResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::crdt::Status*>(&::crdt::Status::default_instance());
}

DetachResponse::DetachResponse(const DetachResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.DetachResponse)
}

void DetachResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
}

DetachResponse::~DetachResponse() {
  // @@protoc_insertion_point(destructor:crdt.DetachResponse)
  SharedDtor();
}

void DetachResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void DetachResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetachResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetachResponse_descriptor_;
}

const DetachResponse& DetachResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

DetachResponse* DetachResponse::default_instance_ = NULL;

DetachResponse* DetachResponse::New(::google::protobuf::Arena* arena) const {
  DetachResponse* n = new DetachResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DetachResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}

bool DetachResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.DetachResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crdt.Status status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.DetachResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.DetachResponse)
  return false;
#undef DO_
}

void DetachResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.DetachResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.DetachResponse)
}

::google::protobuf::uint8* DetachResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.DetachResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->status_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.DetachResponse)
  return target;
}

int DetachResponse::ByteSize() const {
  int total_size = 0;

  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetachResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DetachResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DetachResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetachResponse::MergeFrom(const DetachResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_status()) {
    mutable_status()->::crdt::Status::MergeFrom(from.status());
  }
}

void DetachResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetachResponse::CopyFrom(const DetachResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetachResponse::IsInitialized() const {

  return true;
}

void DetachResponse::Swap(DetachResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DetachResponse::InternalSwap(DetachResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DetachResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetachResponse_descriptor_;
  metadata.reflection = DetachResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DetachResponse

// optional .crdt.Status status = 1;
bool DetachResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void DetachResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::crdt::Status& DetachResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.DetachResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::crdt::Status* DetachResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.DetachResponse.status)
  return status_;
}
::crdt::Status* DetachResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void DetachResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.DetachResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitRequest::kReferenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitRequest::CommitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.CommitRequest)
}

void CommitRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CommitRequest::CommitRequest(const CommitRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.CommitRequest)
}

void CommitRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  referenceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CommitRequest::~CommitRequest() {
  // @@protoc_insertion_point(destructor:crdt.CommitRequest)
  SharedDtor();
}

void CommitRequest::SharedDtor() {
  referenceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CommitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitRequest_descriptor_;
}

const CommitRequest& CommitRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

CommitRequest* CommitRequest::default_instance_ = NULL;

CommitRequest* CommitRequest::New(::google::protobuf::Arena* arena) const {
  CommitRequest* n = new CommitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitRequest::Clear() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CommitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.CommitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string referenceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referenceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->referenceid().data(), this->referenceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.CommitRequest.referenceId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.CommitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.CommitRequest)
  return false;
#undef DO_
}

void CommitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.CommitRequest)
  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CommitRequest.referenceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->referenceid(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.CommitRequest)
}

::google::protobuf::uint8* CommitRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.CommitRequest)
  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CommitRequest.referenceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->referenceid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.CommitRequest)
  return target;
}

int CommitRequest::ByteSize() const {
  int total_size = 0;

  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->referenceid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommitRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommitRequest::MergeFrom(const CommitRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.referenceid().size() > 0) {

    referenceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referenceid_);
  }
}

void CommitRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitRequest::CopyFrom(const CommitRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitRequest::IsInitialized() const {

  return true;
}

void CommitRequest::Swap(CommitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitRequest::InternalSwap(CommitRequest* other) {
  referenceid_.Swap(&other->referenceid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitRequest_descriptor_;
  metadata.reflection = CommitRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitRequest

// optional string referenceId = 1;
void CommitRequest::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CommitRequest::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.CommitRequest.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommitRequest::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CommitRequest.referenceId)
}
 void CommitRequest::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CommitRequest.referenceId)
}
 void CommitRequest::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CommitRequest.referenceId)
}
 ::std::string* CommitRequest::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CommitRequest.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CommitRequest::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CommitRequest::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.CommitRequest.referenceId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitResponse::CommitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.CommitResponse)
}

void CommitResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::crdt::Status*>(&::crdt::Status::default_instance());
}

CommitResponse::CommitResponse(const CommitResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.CommitResponse)
}

void CommitResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
}

CommitResponse::~CommitResponse() {
  // @@protoc_insertion_point(destructor:crdt.CommitResponse)
  SharedDtor();
}

void CommitResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void CommitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommitResponse_descriptor_;
}

const CommitResponse& CommitResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

CommitResponse* CommitResponse::default_instance_ = NULL;

CommitResponse* CommitResponse::New(::google::protobuf::Arena* arena) const {
  CommitResponse* n = new CommitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}

bool CommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.CommitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crdt.Status status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.CommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.CommitResponse)
  return false;
#undef DO_
}

void CommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.CommitResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.CommitResponse)
}

::google::protobuf::uint8* CommitResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.CommitResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->status_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.CommitResponse)
  return target;
}

int CommitResponse::ByteSize() const {
  int total_size = 0;

  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CommitResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommitResponse::MergeFrom(const CommitResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_status()) {
    mutable_status()->::crdt::Status::MergeFrom(from.status());
  }
}

void CommitResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitResponse::CopyFrom(const CommitResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse::IsInitialized() const {

  return true;
}

void CommitResponse::Swap(CommitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitResponse::InternalSwap(CommitResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommitResponse_descriptor_;
  metadata.reflection = CommitResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CommitResponse

// optional .crdt.Status status = 1;
bool CommitResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void CommitResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::crdt::Status& CommitResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.CommitResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::crdt::Status* CommitResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.CommitResponse.status)
  return status_;
}
::crdt::Status* CommitResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void CommitResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.CommitResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EqualsRequest::kReferenceIdFieldNumber;
const int EqualsRequest::kOtherReferenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EqualsRequest::EqualsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.EqualsRequest)
}

void EqualsRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

EqualsRequest::EqualsRequest(const EqualsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.EqualsRequest)
}

void EqualsRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  referenceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otherreferenceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

EqualsRequest::~EqualsRequest() {
  // @@protoc_insertion_point(destructor:crdt.EqualsRequest)
  SharedDtor();
}

void EqualsRequest::SharedDtor() {
  referenceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otherreferenceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void EqualsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EqualsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EqualsRequest_descriptor_;
}

const EqualsRequest& EqualsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

EqualsRequest* EqualsRequest::default_instance_ = NULL;

EqualsRequest* EqualsRequest::New(::google::protobuf::Arena* arena) const {
  EqualsRequest* n = new EqualsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EqualsRequest::Clear() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otherreferenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool EqualsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.EqualsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string referenceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referenceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->referenceid().data(), this->referenceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.EqualsRequest.referenceId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_otherReferenceId;
        break;
      }

      // optional string otherReferenceId = 2;
      case 2: {
        if (tag == 18) {
         parse_otherReferenceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otherreferenceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->otherreferenceid().data(), this->otherreferenceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.EqualsRequest.otherReferenceId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.EqualsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.EqualsRequest)
  return false;
#undef DO_
}

void EqualsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.EqualsRequest)
  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.EqualsRequest.referenceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->referenceid(), output);
  }

  // optional string otherReferenceId = 2;
  if (this->otherreferenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->otherreferenceid().data(), this->otherreferenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.EqualsRequest.otherReferenceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->otherreferenceid(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.EqualsRequest)
}

::google::protobuf::uint8* EqualsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.EqualsRequest)
  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.EqualsRequest.referenceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->referenceid(), target);
  }

  // optional string otherReferenceId = 2;
  if (this->otherreferenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->otherreferenceid().data(), this->otherreferenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.EqualsRequest.otherReferenceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->otherreferenceid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.EqualsRequest)
  return target;
}

int EqualsRequest::ByteSize() const {
  int total_size = 0;

  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->referenceid());
  }

  // optional string otherReferenceId = 2;
  if (this->otherreferenceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->otherreferenceid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EqualsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EqualsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EqualsRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EqualsRequest::MergeFrom(const EqualsRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.referenceid().size() > 0) {

    referenceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referenceid_);
  }
  if (from.otherreferenceid().size() > 0) {

    otherreferenceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.otherreferenceid_);
  }
}

void EqualsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EqualsRequest::CopyFrom(const EqualsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EqualsRequest::IsInitialized() const {

  return true;
}

void EqualsRequest::Swap(EqualsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EqualsRequest::InternalSwap(EqualsRequest* other) {
  referenceid_.Swap(&other->referenceid_);
  otherreferenceid_.Swap(&other->otherreferenceid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EqualsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EqualsRequest_descriptor_;
  metadata.reflection = EqualsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EqualsRequest

// optional string referenceId = 1;
void EqualsRequest::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EqualsRequest::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.EqualsRequest.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EqualsRequest::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.EqualsRequest.referenceId)
}
 void EqualsRequest::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.EqualsRequest.referenceId)
}
 void EqualsRequest::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.EqualsRequest.referenceId)
}
 ::std::string* EqualsRequest::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.EqualsRequest.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EqualsRequest::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EqualsRequest::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.EqualsRequest.referenceId)
}

// optional string otherReferenceId = 2;
void EqualsRequest::clear_otherreferenceid() {
  otherreferenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& EqualsRequest::otherreferenceid() const {
  // @@protoc_insertion_point(field_get:crdt.EqualsRequest.otherReferenceId)
  return otherreferenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EqualsRequest::set_otherreferenceid(const ::std::string& value) {
  
  otherreferenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.EqualsRequest.otherReferenceId)
}
 void EqualsRequest::set_otherreferenceid(const char* value) {
  
  otherreferenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.EqualsRequest.otherReferenceId)
}
 void EqualsRequest::set_otherreferenceid(const char* value, size_t size) {
  
  otherreferenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.EqualsRequest.otherReferenceId)
}
 ::std::string* EqualsRequest::mutable_otherreferenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.EqualsRequest.otherReferenceId)
  return otherreferenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* EqualsRequest::release_otherreferenceid() {
  
  return otherreferenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void EqualsRequest::set_allocated_otherreferenceid(::std::string* otherreferenceid) {
  if (otherreferenceid != NULL) {
    
  } else {
    
  }
  otherreferenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), otherreferenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.EqualsRequest.otherReferenceId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EqualsResponse::kStatusFieldNumber;
const int EqualsResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EqualsResponse::EqualsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.EqualsResponse)
}

void EqualsResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::crdt::Status*>(&::crdt::Status::default_instance());
}

EqualsResponse::EqualsResponse(const EqualsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.EqualsResponse)
}

void EqualsResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
  result_ = false;
}

EqualsResponse::~EqualsResponse() {
  // @@protoc_insertion_point(destructor:crdt.EqualsResponse)
  SharedDtor();
}

void EqualsResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void EqualsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EqualsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EqualsResponse_descriptor_;
}

const EqualsResponse& EqualsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

EqualsResponse* EqualsResponse::default_instance_ = NULL;

EqualsResponse* EqualsResponse::New(::google::protobuf::Arena* arena) const {
  EqualsResponse* n = new EqualsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EqualsResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
  result_ = false;
}

bool EqualsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.EqualsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crdt.Status status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional bool result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.EqualsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.EqualsResponse)
  return false;
#undef DO_
}

void EqualsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.EqualsResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // optional bool result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.EqualsResponse)
}

::google::protobuf::uint8* EqualsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.EqualsResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->status_, target);
  }

  // optional bool result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.EqualsResponse)
  return target;
}

int EqualsResponse::ByteSize() const {
  int total_size = 0;

  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // optional bool result = 2;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EqualsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const EqualsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EqualsResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EqualsResponse::MergeFrom(const EqualsResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_status()) {
    mutable_status()->::crdt::Status::MergeFrom(from.status());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void EqualsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EqualsResponse::CopyFrom(const EqualsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EqualsResponse::IsInitialized() const {

  return true;
}

void EqualsResponse::Swap(EqualsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EqualsResponse::InternalSwap(EqualsResponse* other) {
  std::swap(status_, other->status_);
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EqualsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EqualsResponse_descriptor_;
  metadata.reflection = EqualsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EqualsResponse

// optional .crdt.Status status = 1;
bool EqualsResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void EqualsResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::crdt::Status& EqualsResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.EqualsResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::crdt::Status* EqualsResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.EqualsResponse.status)
  return status_;
}
::crdt::Status* EqualsResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void EqualsResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.EqualsResponse.status)
}

// optional bool result = 2;
void EqualsResponse::clear_result() {
  result_ = false;
}
 bool EqualsResponse::result() const {
  // @@protoc_insertion_point(field_get:crdt.EqualsResponse.result)
  return result_;
}
 void EqualsResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:crdt.EqualsResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MergeRequest::kReferenceIdFieldNumber;
const int MergeRequest::kOtherReferenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MergeRequest::MergeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.MergeRequest)
}

void MergeRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MergeRequest::MergeRequest(const MergeRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.MergeRequest)
}

void MergeRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  referenceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otherreferenceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MergeRequest::~MergeRequest() {
  // @@protoc_insertion_point(destructor:crdt.MergeRequest)
  SharedDtor();
}

void MergeRequest::SharedDtor() {
  referenceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otherreferenceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MergeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MergeRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MergeRequest_descriptor_;
}

const MergeRequest& MergeRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

MergeRequest* MergeRequest::default_instance_ = NULL;

MergeRequest* MergeRequest::New(::google::protobuf::Arena* arena) const {
  MergeRequest* n = new MergeRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MergeRequest::Clear() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  otherreferenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool MergeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.MergeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string referenceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referenceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->referenceid().data(), this->referenceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.MergeRequest.referenceId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_otherReferenceId;
        break;
      }

      // optional string otherReferenceId = 2;
      case 2: {
        if (tag == 18) {
         parse_otherReferenceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_otherreferenceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->otherreferenceid().data(), this->otherreferenceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.MergeRequest.otherReferenceId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.MergeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.MergeRequest)
  return false;
#undef DO_
}

void MergeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.MergeRequest)
  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.MergeRequest.referenceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->referenceid(), output);
  }

  // optional string otherReferenceId = 2;
  if (this->otherreferenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->otherreferenceid().data(), this->otherreferenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.MergeRequest.otherReferenceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->otherreferenceid(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.MergeRequest)
}

::google::protobuf::uint8* MergeRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.MergeRequest)
  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.MergeRequest.referenceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->referenceid(), target);
  }

  // optional string otherReferenceId = 2;
  if (this->otherreferenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->otherreferenceid().data(), this->otherreferenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.MergeRequest.otherReferenceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->otherreferenceid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.MergeRequest)
  return target;
}

int MergeRequest::ByteSize() const {
  int total_size = 0;

  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->referenceid());
  }

  // optional string otherReferenceId = 2;
  if (this->otherreferenceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->otherreferenceid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MergeRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MergeRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MergeRequest::MergeFrom(const MergeRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.referenceid().size() > 0) {

    referenceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referenceid_);
  }
  if (from.otherreferenceid().size() > 0) {

    otherreferenceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.otherreferenceid_);
  }
}

void MergeRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeRequest::CopyFrom(const MergeRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeRequest::IsInitialized() const {

  return true;
}

void MergeRequest::Swap(MergeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MergeRequest::InternalSwap(MergeRequest* other) {
  referenceid_.Swap(&other->referenceid_);
  otherreferenceid_.Swap(&other->otherreferenceid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MergeRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MergeRequest_descriptor_;
  metadata.reflection = MergeRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MergeRequest

// optional string referenceId = 1;
void MergeRequest::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MergeRequest::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.MergeRequest.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MergeRequest::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.MergeRequest.referenceId)
}
 void MergeRequest::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.MergeRequest.referenceId)
}
 void MergeRequest::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.MergeRequest.referenceId)
}
 ::std::string* MergeRequest::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.MergeRequest.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MergeRequest::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MergeRequest::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.MergeRequest.referenceId)
}

// optional string otherReferenceId = 2;
void MergeRequest::clear_otherreferenceid() {
  otherreferenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MergeRequest::otherreferenceid() const {
  // @@protoc_insertion_point(field_get:crdt.MergeRequest.otherReferenceId)
  return otherreferenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MergeRequest::set_otherreferenceid(const ::std::string& value) {
  
  otherreferenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.MergeRequest.otherReferenceId)
}
 void MergeRequest::set_otherreferenceid(const char* value) {
  
  otherreferenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.MergeRequest.otherReferenceId)
}
 void MergeRequest::set_otherreferenceid(const char* value, size_t size) {
  
  otherreferenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.MergeRequest.otherReferenceId)
}
 ::std::string* MergeRequest::mutable_otherreferenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.MergeRequest.otherReferenceId)
  return otherreferenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MergeRequest::release_otherreferenceid() {
  
  return otherreferenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MergeRequest::set_allocated_otherreferenceid(::std::string* otherreferenceid) {
  if (otherreferenceid != NULL) {
    
  } else {
    
  }
  otherreferenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), otherreferenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.MergeRequest.otherReferenceId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MergeResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MergeResponse::MergeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.MergeResponse)
}

void MergeResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::crdt::Status*>(&::crdt::Status::default_instance());
}

MergeResponse::MergeResponse(const MergeResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.MergeResponse)
}

void MergeResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
}

MergeResponse::~MergeResponse() {
  // @@protoc_insertion_point(destructor:crdt.MergeResponse)
  SharedDtor();
}

void MergeResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void MergeResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MergeResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MergeResponse_descriptor_;
}

const MergeResponse& MergeResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

MergeResponse* MergeResponse::default_instance_ = NULL;

MergeResponse* MergeResponse::New(::google::protobuf::Arena* arena) const {
  MergeResponse* n = new MergeResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MergeResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}

bool MergeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.MergeResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crdt.Status status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.MergeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.MergeResponse)
  return false;
#undef DO_
}

void MergeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.MergeResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.MergeResponse)
}

::google::protobuf::uint8* MergeResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.MergeResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->status_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.MergeResponse)
  return target;
}

int MergeResponse::ByteSize() const {
  int total_size = 0;

  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MergeResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MergeResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MergeResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MergeResponse::MergeFrom(const MergeResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_status()) {
    mutable_status()->::crdt::Status::MergeFrom(from.status());
  }
}

void MergeResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MergeResponse::CopyFrom(const MergeResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MergeResponse::IsInitialized() const {

  return true;
}

void MergeResponse::Swap(MergeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MergeResponse::InternalSwap(MergeResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MergeResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MergeResponse_descriptor_;
  metadata.reflection = MergeResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MergeResponse

// optional .crdt.Status status = 1;
bool MergeResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void MergeResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::crdt::Status& MergeResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.MergeResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::crdt::Status* MergeResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.MergeResponse.status)
  return status_;
}
::crdt::Status* MergeResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void MergeResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.MergeResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloneRequest::kReferenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloneRequest::CloneRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.CloneRequest)
}

void CloneRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CloneRequest::CloneRequest(const CloneRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.CloneRequest)
}

void CloneRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  referenceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CloneRequest::~CloneRequest() {
  // @@protoc_insertion_point(destructor:crdt.CloneRequest)
  SharedDtor();
}

void CloneRequest::SharedDtor() {
  referenceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CloneRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloneRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloneRequest_descriptor_;
}

const CloneRequest& CloneRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

CloneRequest* CloneRequest::default_instance_ = NULL;

CloneRequest* CloneRequest::New(::google::protobuf::Arena* arena) const {
  CloneRequest* n = new CloneRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloneRequest::Clear() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CloneRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.CloneRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string referenceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referenceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->referenceid().data(), this->referenceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.CloneRequest.referenceId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.CloneRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.CloneRequest)
  return false;
#undef DO_
}

void CloneRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.CloneRequest)
  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CloneRequest.referenceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->referenceid(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.CloneRequest)
}

::google::protobuf::uint8* CloneRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.CloneRequest)
  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CloneRequest.referenceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->referenceid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.CloneRequest)
  return target;
}

int CloneRequest::ByteSize() const {
  int total_size = 0;

  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->referenceid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloneRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CloneRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CloneRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloneRequest::MergeFrom(const CloneRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.referenceid().size() > 0) {

    referenceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referenceid_);
  }
}

void CloneRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloneRequest::CopyFrom(const CloneRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloneRequest::IsInitialized() const {

  return true;
}

void CloneRequest::Swap(CloneRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloneRequest::InternalSwap(CloneRequest* other) {
  referenceid_.Swap(&other->referenceid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloneRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloneRequest_descriptor_;
  metadata.reflection = CloneRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloneRequest

// optional string referenceId = 1;
void CloneRequest::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CloneRequest::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.CloneRequest.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CloneRequest::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CloneRequest.referenceId)
}
 void CloneRequest::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CloneRequest.referenceId)
}
 void CloneRequest::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CloneRequest.referenceId)
}
 ::std::string* CloneRequest::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CloneRequest.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CloneRequest::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CloneRequest::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.CloneRequest.referenceId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CloneResponse::kStatusFieldNumber;
const int CloneResponse::kResourceIdFieldNumber;
const int CloneResponse::kResourceKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CloneResponse::CloneResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.CloneResponse)
}

void CloneResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::crdt::Status*>(&::crdt::Status::default_instance());
}

CloneResponse::CloneResponse(const CloneResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.CloneResponse)
}

void CloneResponse::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = NULL;
  resourceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourcekey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CloneResponse::~CloneResponse() {
  // @@protoc_insertion_point(destructor:crdt.CloneResponse)
  SharedDtor();
}

void CloneResponse::SharedDtor() {
  resourceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourcekey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete status_;
  }
}

void CloneResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloneResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloneResponse_descriptor_;
}

const CloneResponse& CloneResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

CloneResponse* CloneResponse::default_instance_ = NULL;

CloneResponse* CloneResponse::New(::google::protobuf::Arena* arena) const {
  CloneResponse* n = new CloneResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CloneResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
  resourceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resourcekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CloneResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.CloneResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crdt.Status status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resourceId;
        break;
      }

      // optional string resourceId = 2;
      case 2: {
        if (tag == 18) {
         parse_resourceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resourceid().data(), this->resourceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.CloneResponse.resourceId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resourceKey;
        break;
      }

      // optional string resourceKey = 3;
      case 3: {
        if (tag == 26) {
         parse_resourceKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resourcekey()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->resourcekey().data(), this->resourcekey().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.CloneResponse.resourceKey"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.CloneResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.CloneResponse)
  return false;
#undef DO_
}

void CloneResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.CloneResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // optional string resourceId = 2;
  if (this->resourceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourceid().data(), this->resourceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CloneResponse.resourceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->resourceid(), output);
  }

  // optional string resourceKey = 3;
  if (this->resourcekey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourcekey().data(), this->resourcekey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CloneResponse.resourceKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resourcekey(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.CloneResponse)
}

::google::protobuf::uint8* CloneResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.CloneResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->status_, target);
  }

  // optional string resourceId = 2;
  if (this->resourceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourceid().data(), this->resourceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CloneResponse.resourceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->resourceid(), target);
  }

  // optional string resourceKey = 3;
  if (this->resourcekey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->resourcekey().data(), this->resourcekey().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.CloneResponse.resourceKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resourcekey(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.CloneResponse)
  return target;
}

int CloneResponse::ByteSize() const {
  int total_size = 0;

  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // optional string resourceId = 2;
  if (this->resourceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resourceid());
  }

  // optional string resourceKey = 3;
  if (this->resourcekey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->resourcekey());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloneResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CloneResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CloneResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloneResponse::MergeFrom(const CloneResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_status()) {
    mutable_status()->::crdt::Status::MergeFrom(from.status());
  }
  if (from.resourceid().size() > 0) {

    resourceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resourceid_);
  }
  if (from.resourcekey().size() > 0) {

    resourcekey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resourcekey_);
  }
}

void CloneResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloneResponse::CopyFrom(const CloneResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloneResponse::IsInitialized() const {

  return true;
}

void CloneResponse::Swap(CloneResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CloneResponse::InternalSwap(CloneResponse* other) {
  std::swap(status_, other->status_);
  resourceid_.Swap(&other->resourceid_);
  resourcekey_.Swap(&other->resourcekey_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CloneResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloneResponse_descriptor_;
  metadata.reflection = CloneResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CloneResponse

// optional .crdt.Status status = 1;
bool CloneResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void CloneResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::crdt::Status& CloneResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.CloneResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::crdt::Status* CloneResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.CloneResponse.status)
  return status_;
}
::crdt::Status* CloneResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void CloneResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.CloneResponse.status)
}

// optional string resourceId = 2;
void CloneResponse::clear_resourceid() {
  resourceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CloneResponse::resourceid() const {
  // @@protoc_insertion_point(field_get:crdt.CloneResponse.resourceId)
  return resourceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CloneResponse::set_resourceid(const ::std::string& value) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CloneResponse.resourceId)
}
 void CloneResponse::set_resourceid(const char* value) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CloneResponse.resourceId)
}
 void CloneResponse::set_resourceid(const char* value, size_t size) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CloneResponse.resourceId)
}
 ::std::string* CloneResponse::mutable_resourceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CloneResponse.resourceId)
  return resourceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CloneResponse::release_resourceid() {
  
  return resourceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CloneResponse::set_allocated_resourceid(::std::string* resourceid) {
  if (resourceid != NULL) {
    
  } else {
    
  }
  resourceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.CloneResponse.resourceId)
}

// optional string resourceKey = 3;
void CloneResponse::clear_resourcekey() {
  resourcekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CloneResponse::resourcekey() const {
  // @@protoc_insertion_point(field_get:crdt.CloneResponse.resourceKey)
  return resourcekey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CloneResponse::set_resourcekey(const ::std::string& value) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CloneResponse.resourceKey)
}
 void CloneResponse::set_resourcekey(const char* value) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CloneResponse.resourceKey)
}
 void CloneResponse::set_resourcekey(const char* value, size_t size) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CloneResponse.resourceKey)
}
 ::std::string* CloneResponse::mutable_resourcekey() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CloneResponse.resourceKey)
  return resourcekey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CloneResponse::release_resourcekey() {
  
  return resourcekey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CloneResponse::set_allocated_resourcekey(::std::string* resourcekey) {
  if (resourcekey != NULL) {
    
  } else {
    
  }
  resourcekey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourcekey);
  // @@protoc_insertion_point(field_set_allocated:crdt.CloneResponse.resourceKey)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SupportedTypesResponse::kTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SupportedTypesResponse::SupportedTypesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.SupportedTypesResponse)
}

void SupportedTypesResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SupportedTypesResponse::SupportedTypesResponse(const SupportedTypesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.SupportedTypesResponse)
}

void SupportedTypesResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SupportedTypesResponse::~SupportedTypesResponse() {
  // @@protoc_insertion_point(destructor:crdt.SupportedTypesResponse)
  SharedDtor();
}

void SupportedTypesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SupportedTypesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SupportedTypesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SupportedTypesResponse_descriptor_;
}

const SupportedTypesResponse& SupportedTypesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

SupportedTypesResponse* SupportedTypesResponse::default_instance_ = NULL;

SupportedTypesResponse* SupportedTypesResponse::New(::google::protobuf::Arena* arena) const {
  SupportedTypesResponse* n = new SupportedTypesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SupportedTypesResponse::Clear() {
  types_.Clear();
}

bool SupportedTypesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.SupportedTypesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .crdt.TypeMessage types = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_types()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_types;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.SupportedTypesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.SupportedTypesResponse)
  return false;
#undef DO_
}

void SupportedTypesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.SupportedTypesResponse)
  // repeated .crdt.TypeMessage types = 1;
  for (unsigned int i = 0, n = this->types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->types(i), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.SupportedTypesResponse)
}

::google::protobuf::uint8* SupportedTypesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.SupportedTypesResponse)
  // repeated .crdt.TypeMessage types = 1;
  for (unsigned int i = 0, n = this->types_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->types(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.SupportedTypesResponse)
  return target;
}

int SupportedTypesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .crdt.TypeMessage types = 1;
  total_size += 1 * this->types_size();
  for (int i = 0; i < this->types_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->types(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SupportedTypesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SupportedTypesResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SupportedTypesResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SupportedTypesResponse::MergeFrom(const SupportedTypesResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  types_.MergeFrom(from.types_);
}

void SupportedTypesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupportedTypesResponse::CopyFrom(const SupportedTypesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportedTypesResponse::IsInitialized() const {

  return true;
}

void SupportedTypesResponse::Swap(SupportedTypesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SupportedTypesResponse::InternalSwap(SupportedTypesResponse* other) {
  types_.UnsafeArenaSwap(&other->types_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SupportedTypesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SupportedTypesResponse_descriptor_;
  metadata.reflection = SupportedTypesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SupportedTypesResponse

// repeated .crdt.TypeMessage types = 1;
int SupportedTypesResponse::types_size() const {
  return types_.size();
}
void SupportedTypesResponse::clear_types() {
  types_.Clear();
}
const ::crdt::TypeMessage& SupportedTypesResponse::types(int index) const {
  // @@protoc_insertion_point(field_get:crdt.SupportedTypesResponse.types)
  return types_.Get(index);
}
::crdt::TypeMessage* SupportedTypesResponse::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:crdt.SupportedTypesResponse.types)
  return types_.Mutable(index);
}
::crdt::TypeMessage* SupportedTypesResponse::add_types() {
  // @@protoc_insertion_point(field_add:crdt.SupportedTypesResponse.types)
  return types_.Add();
}
::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >*
SupportedTypesResponse::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:crdt.SupportedTypesResponse.types)
  return &types_;
}
const ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >&
SupportedTypesResponse::types() const {
  // @@protoc_insertion_point(field_list:crdt.SupportedTypesResponse.types)
  return types_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SupportedStorageTypesResponse::kTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SupportedStorageTypesResponse::SupportedStorageTypesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.SupportedStorageTypesResponse)
}

void SupportedStorageTypesResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SupportedStorageTypesResponse::SupportedStorageTypesResponse(const SupportedStorageTypesResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.SupportedStorageTypesResponse)
}

void SupportedStorageTypesResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SupportedStorageTypesResponse::~SupportedStorageTypesResponse() {
  // @@protoc_insertion_point(destructor:crdt.SupportedStorageTypesResponse)
  SharedDtor();
}

void SupportedStorageTypesResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SupportedStorageTypesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SupportedStorageTypesResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SupportedStorageTypesResponse_descriptor_;
}

const SupportedStorageTypesResponse& SupportedStorageTypesResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

SupportedStorageTypesResponse* SupportedStorageTypesResponse::default_instance_ = NULL;

SupportedStorageTypesResponse* SupportedStorageTypesResponse::New(::google::protobuf::Arena* arena) const {
  SupportedStorageTypesResponse* n = new SupportedStorageTypesResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SupportedStorageTypesResponse::Clear() {
  types_.Clear();
}

bool SupportedStorageTypesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.SupportedStorageTypesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .crdt.TypeMessage types = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_types()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_types;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.SupportedStorageTypesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.SupportedStorageTypesResponse)
  return false;
#undef DO_
}

void SupportedStorageTypesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.SupportedStorageTypesResponse)
  // repeated .crdt.TypeMessage types = 1;
  for (unsigned int i = 0, n = this->types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->types(i), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.SupportedStorageTypesResponse)
}

::google::protobuf::uint8* SupportedStorageTypesResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.SupportedStorageTypesResponse)
  // repeated .crdt.TypeMessage types = 1;
  for (unsigned int i = 0, n = this->types_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->types(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.SupportedStorageTypesResponse)
  return target;
}

int SupportedStorageTypesResponse::ByteSize() const {
  int total_size = 0;

  // repeated .crdt.TypeMessage types = 1;
  total_size += 1 * this->types_size();
  for (int i = 0; i < this->types_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->types(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SupportedStorageTypesResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SupportedStorageTypesResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SupportedStorageTypesResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SupportedStorageTypesResponse::MergeFrom(const SupportedStorageTypesResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  types_.MergeFrom(from.types_);
}

void SupportedStorageTypesResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupportedStorageTypesResponse::CopyFrom(const SupportedStorageTypesResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportedStorageTypesResponse::IsInitialized() const {

  return true;
}

void SupportedStorageTypesResponse::Swap(SupportedStorageTypesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SupportedStorageTypesResponse::InternalSwap(SupportedStorageTypesResponse* other) {
  types_.UnsafeArenaSwap(&other->types_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SupportedStorageTypesResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SupportedStorageTypesResponse_descriptor_;
  metadata.reflection = SupportedStorageTypesResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SupportedStorageTypesResponse

// repeated .crdt.TypeMessage types = 1;
int SupportedStorageTypesResponse::types_size() const {
  return types_.size();
}
void SupportedStorageTypesResponse::clear_types() {
  types_.Clear();
}
const ::crdt::TypeMessage& SupportedStorageTypesResponse::types(int index) const {
  // @@protoc_insertion_point(field_get:crdt.SupportedStorageTypesResponse.types)
  return types_.Get(index);
}
::crdt::TypeMessage* SupportedStorageTypesResponse::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:crdt.SupportedStorageTypesResponse.types)
  return types_.Mutable(index);
}
::crdt::TypeMessage* SupportedStorageTypesResponse::add_types() {
  // @@protoc_insertion_point(field_add:crdt.SupportedStorageTypesResponse.types)
  return types_.Add();
}
::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >*
SupportedStorageTypesResponse::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:crdt.SupportedStorageTypesResponse.types)
  return &types_;
}
const ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >&
SupportedStorageTypesResponse::types() const {
  // @@protoc_insertion_point(field_list:crdt.SupportedStorageTypesResponse.types)
  return types_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SupportedCryptoMethodsResponse::kTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SupportedCryptoMethodsResponse::SupportedCryptoMethodsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.SupportedCryptoMethodsResponse)
}

void SupportedCryptoMethodsResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SupportedCryptoMethodsResponse::SupportedCryptoMethodsResponse(const SupportedCryptoMethodsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.SupportedCryptoMethodsResponse)
}

void SupportedCryptoMethodsResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SupportedCryptoMethodsResponse::~SupportedCryptoMethodsResponse() {
  // @@protoc_insertion_point(destructor:crdt.SupportedCryptoMethodsResponse)
  SharedDtor();
}

void SupportedCryptoMethodsResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SupportedCryptoMethodsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SupportedCryptoMethodsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SupportedCryptoMethodsResponse_descriptor_;
}

const SupportedCryptoMethodsResponse& SupportedCryptoMethodsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

SupportedCryptoMethodsResponse* SupportedCryptoMethodsResponse::default_instance_ = NULL;

SupportedCryptoMethodsResponse* SupportedCryptoMethodsResponse::New(::google::protobuf::Arena* arena) const {
  SupportedCryptoMethodsResponse* n = new SupportedCryptoMethodsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SupportedCryptoMethodsResponse::Clear() {
  types_.Clear();
}

bool SupportedCryptoMethodsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.SupportedCryptoMethodsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .crdt.TypeMessage types = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_types:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_types()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_types;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.SupportedCryptoMethodsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.SupportedCryptoMethodsResponse)
  return false;
#undef DO_
}

void SupportedCryptoMethodsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.SupportedCryptoMethodsResponse)
  // repeated .crdt.TypeMessage types = 1;
  for (unsigned int i = 0, n = this->types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->types(i), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.SupportedCryptoMethodsResponse)
}

::google::protobuf::uint8* SupportedCryptoMethodsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.SupportedCryptoMethodsResponse)
  // repeated .crdt.TypeMessage types = 1;
  for (unsigned int i = 0, n = this->types_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->types(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.SupportedCryptoMethodsResponse)
  return target;
}

int SupportedCryptoMethodsResponse::ByteSize() const {
  int total_size = 0;

  // repeated .crdt.TypeMessage types = 1;
  total_size += 1 * this->types_size();
  for (int i = 0; i < this->types_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->types(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SupportedCryptoMethodsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SupportedCryptoMethodsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SupportedCryptoMethodsResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SupportedCryptoMethodsResponse::MergeFrom(const SupportedCryptoMethodsResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  types_.MergeFrom(from.types_);
}

void SupportedCryptoMethodsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SupportedCryptoMethodsResponse::CopyFrom(const SupportedCryptoMethodsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SupportedCryptoMethodsResponse::IsInitialized() const {

  return true;
}

void SupportedCryptoMethodsResponse::Swap(SupportedCryptoMethodsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SupportedCryptoMethodsResponse::InternalSwap(SupportedCryptoMethodsResponse* other) {
  types_.UnsafeArenaSwap(&other->types_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SupportedCryptoMethodsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SupportedCryptoMethodsResponse_descriptor_;
  metadata.reflection = SupportedCryptoMethodsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SupportedCryptoMethodsResponse

// repeated .crdt.TypeMessage types = 1;
int SupportedCryptoMethodsResponse::types_size() const {
  return types_.size();
}
void SupportedCryptoMethodsResponse::clear_types() {
  types_.Clear();
}
const ::crdt::TypeMessage& SupportedCryptoMethodsResponse::types(int index) const {
  // @@protoc_insertion_point(field_get:crdt.SupportedCryptoMethodsResponse.types)
  return types_.Get(index);
}
::crdt::TypeMessage* SupportedCryptoMethodsResponse::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:crdt.SupportedCryptoMethodsResponse.types)
  return types_.Mutable(index);
}
::crdt::TypeMessage* SupportedCryptoMethodsResponse::add_types() {
  // @@protoc_insertion_point(field_add:crdt.SupportedCryptoMethodsResponse.types)
  return types_.Add();
}
::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >*
SupportedCryptoMethodsResponse::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:crdt.SupportedCryptoMethodsResponse.types)
  return &types_;
}
const ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >&
SupportedCryptoMethodsResponse::types() const {
  // @@protoc_insertion_point(field_list:crdt.SupportedCryptoMethodsResponse.types)
  return types_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetListRequest::kReferenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetListRequest::SetListRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.SetListRequest)
}

void SetListRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetListRequest::SetListRequest(const SetListRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.SetListRequest)
}

void SetListRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  referenceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SetListRequest::~SetListRequest() {
  // @@protoc_insertion_point(destructor:crdt.SetListRequest)
  SharedDtor();
}

void SetListRequest::SharedDtor() {
  referenceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SetListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetListRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetListRequest_descriptor_;
}

const SetListRequest& SetListRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

SetListRequest* SetListRequest::default_instance_ = NULL;

SetListRequest* SetListRequest::New(::google::protobuf::Arena* arena) const {
  SetListRequest* n = new SetListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetListRequest::Clear() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SetListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.SetListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string referenceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referenceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->referenceid().data(), this->referenceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.SetListRequest.referenceId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.SetListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.SetListRequest)
  return false;
#undef DO_
}

void SetListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.SetListRequest)
  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.SetListRequest.referenceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->referenceid(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.SetListRequest)
}

::google::protobuf::uint8* SetListRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.SetListRequest)
  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.SetListRequest.referenceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->referenceid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.SetListRequest)
  return target;
}

int SetListRequest::ByteSize() const {
  int total_size = 0;

  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->referenceid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetListRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetListRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetListRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetListRequest::MergeFrom(const SetListRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.referenceid().size() > 0) {

    referenceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referenceid_);
  }
}

void SetListRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetListRequest::CopyFrom(const SetListRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetListRequest::IsInitialized() const {

  return true;
}

void SetListRequest::Swap(SetListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetListRequest::InternalSwap(SetListRequest* other) {
  referenceid_.Swap(&other->referenceid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetListRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetListRequest_descriptor_;
  metadata.reflection = SetListRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetListRequest

// optional string referenceId = 1;
void SetListRequest::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SetListRequest::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.SetListRequest.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetListRequest::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.SetListRequest.referenceId)
}
 void SetListRequest::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.SetListRequest.referenceId)
}
 void SetListRequest::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.SetListRequest.referenceId)
}
 ::std::string* SetListRequest::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.SetListRequest.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SetListRequest::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetListRequest::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.SetListRequest.referenceId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetInsertRequest::kObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetInsertRequest::SetInsertRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.SetInsertRequest)
}

void SetInsertRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  object_ = const_cast< ::crdt::ResourceObject*>(&::crdt::ResourceObject::default_instance());
}

SetInsertRequest::SetInsertRequest(const SetInsertRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.SetInsertRequest)
}

void SetInsertRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  object_ = NULL;
}

SetInsertRequest::~SetInsertRequest() {
  // @@protoc_insertion_point(destructor:crdt.SetInsertRequest)
  SharedDtor();
}

void SetInsertRequest::SharedDtor() {
  if (this != default_instance_) {
    delete object_;
  }
}

void SetInsertRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetInsertRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetInsertRequest_descriptor_;
}

const SetInsertRequest& SetInsertRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

SetInsertRequest* SetInsertRequest::default_instance_ = NULL;

SetInsertRequest* SetInsertRequest::New(::google::protobuf::Arena* arena) const {
  SetInsertRequest* n = new SetInsertRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetInsertRequest::Clear() {
  if (GetArenaNoVirtual() == NULL && object_ != NULL) delete object_;
  object_ = NULL;
}

bool SetInsertRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.SetInsertRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crdt.ResourceObject object = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.SetInsertRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.SetInsertRequest)
  return false;
#undef DO_
}

void SetInsertRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.SetInsertRequest)
  // optional .crdt.ResourceObject object = 1;
  if (this->has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->object_, output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.SetInsertRequest)
}

::google::protobuf::uint8* SetInsertRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.SetInsertRequest)
  // optional .crdt.ResourceObject object = 1;
  if (this->has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->object_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.SetInsertRequest)
  return target;
}

int SetInsertRequest::ByteSize() const {
  int total_size = 0;

  // optional .crdt.ResourceObject object = 1;
  if (this->has_object()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->object_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetInsertRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetInsertRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetInsertRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetInsertRequest::MergeFrom(const SetInsertRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_object()) {
    mutable_object()->::crdt::ResourceObject::MergeFrom(from.object());
  }
}

void SetInsertRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetInsertRequest::CopyFrom(const SetInsertRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetInsertRequest::IsInitialized() const {

  return true;
}

void SetInsertRequest::Swap(SetInsertRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetInsertRequest::InternalSwap(SetInsertRequest* other) {
  std::swap(object_, other->object_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetInsertRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetInsertRequest_descriptor_;
  metadata.reflection = SetInsertRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetInsertRequest

// optional .crdt.ResourceObject object = 1;
bool SetInsertRequest::has_object() const {
  return !_is_default_instance_ && object_ != NULL;
}
void SetInsertRequest::clear_object() {
  if (GetArenaNoVirtual() == NULL && object_ != NULL) delete object_;
  object_ = NULL;
}
const ::crdt::ResourceObject& SetInsertRequest::object() const {
  // @@protoc_insertion_point(field_get:crdt.SetInsertRequest.object)
  return object_ != NULL ? *object_ : *default_instance_->object_;
}
::crdt::ResourceObject* SetInsertRequest::mutable_object() {
  
  if (object_ == NULL) {
    object_ = new ::crdt::ResourceObject;
  }
  // @@protoc_insertion_point(field_mutable:crdt.SetInsertRequest.object)
  return object_;
}
::crdt::ResourceObject* SetInsertRequest::release_object() {
  
  ::crdt::ResourceObject* temp = object_;
  object_ = NULL;
  return temp;
}
void SetInsertRequest::set_allocated_object(::crdt::ResourceObject* object) {
  delete object_;
  object_ = object;
  if (object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.SetInsertRequest.object)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetInsertResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetInsertResponse::SetInsertResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.SetInsertResponse)
}

void SetInsertResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::crdt::Status*>(&::crdt::Status::default_instance());
}

SetInsertResponse::SetInsertResponse(const SetInsertResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.SetInsertResponse)
}

void SetInsertResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
}

SetInsertResponse::~SetInsertResponse() {
  // @@protoc_insertion_point(destructor:crdt.SetInsertResponse)
  SharedDtor();
}

void SetInsertResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void SetInsertResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetInsertResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetInsertResponse_descriptor_;
}

const SetInsertResponse& SetInsertResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

SetInsertResponse* SetInsertResponse::default_instance_ = NULL;

SetInsertResponse* SetInsertResponse::New(::google::protobuf::Arena* arena) const {
  SetInsertResponse* n = new SetInsertResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetInsertResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}

bool SetInsertResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.SetInsertResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crdt.Status status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.SetInsertResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.SetInsertResponse)
  return false;
#undef DO_
}

void SetInsertResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.SetInsertResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.SetInsertResponse)
}

::google::protobuf::uint8* SetInsertResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.SetInsertResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->status_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.SetInsertResponse)
  return target;
}

int SetInsertResponse::ByteSize() const {
  int total_size = 0;

  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetInsertResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetInsertResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetInsertResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetInsertResponse::MergeFrom(const SetInsertResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_status()) {
    mutable_status()->::crdt::Status::MergeFrom(from.status());
  }
}

void SetInsertResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetInsertResponse::CopyFrom(const SetInsertResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetInsertResponse::IsInitialized() const {

  return true;
}

void SetInsertResponse::Swap(SetInsertResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetInsertResponse::InternalSwap(SetInsertResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetInsertResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetInsertResponse_descriptor_;
  metadata.reflection = SetInsertResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetInsertResponse

// optional .crdt.Status status = 1;
bool SetInsertResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void SetInsertResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::crdt::Status& SetInsertResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.SetInsertResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::crdt::Status* SetInsertResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.SetInsertResponse.status)
  return status_;
}
::crdt::Status* SetInsertResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void SetInsertResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.SetInsertResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRemoveRequest::kObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRemoveRequest::SetRemoveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.SetRemoveRequest)
}

void SetRemoveRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  object_ = const_cast< ::crdt::ResourceObject*>(&::crdt::ResourceObject::default_instance());
}

SetRemoveRequest::SetRemoveRequest(const SetRemoveRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.SetRemoveRequest)
}

void SetRemoveRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  object_ = NULL;
}

SetRemoveRequest::~SetRemoveRequest() {
  // @@protoc_insertion_point(destructor:crdt.SetRemoveRequest)
  SharedDtor();
}

void SetRemoveRequest::SharedDtor() {
  if (this != default_instance_) {
    delete object_;
  }
}

void SetRemoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRemoveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRemoveRequest_descriptor_;
}

const SetRemoveRequest& SetRemoveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

SetRemoveRequest* SetRemoveRequest::default_instance_ = NULL;

SetRemoveRequest* SetRemoveRequest::New(::google::protobuf::Arena* arena) const {
  SetRemoveRequest* n = new SetRemoveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetRemoveRequest::Clear() {
  if (GetArenaNoVirtual() == NULL && object_ != NULL) delete object_;
  object_ = NULL;
}

bool SetRemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.SetRemoveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crdt.ResourceObject object = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.SetRemoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.SetRemoveRequest)
  return false;
#undef DO_
}

void SetRemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.SetRemoveRequest)
  // optional .crdt.ResourceObject object = 1;
  if (this->has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->object_, output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.SetRemoveRequest)
}

::google::protobuf::uint8* SetRemoveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.SetRemoveRequest)
  // optional .crdt.ResourceObject object = 1;
  if (this->has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->object_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.SetRemoveRequest)
  return target;
}

int SetRemoveRequest::ByteSize() const {
  int total_size = 0;

  // optional .crdt.ResourceObject object = 1;
  if (this->has_object()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->object_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRemoveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetRemoveRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetRemoveRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetRemoveRequest::MergeFrom(const SetRemoveRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_object()) {
    mutable_object()->::crdt::ResourceObject::MergeFrom(from.object());
  }
}

void SetRemoveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRemoveRequest::CopyFrom(const SetRemoveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRemoveRequest::IsInitialized() const {

  return true;
}

void SetRemoveRequest::Swap(SetRemoveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRemoveRequest::InternalSwap(SetRemoveRequest* other) {
  std::swap(object_, other->object_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetRemoveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetRemoveRequest_descriptor_;
  metadata.reflection = SetRemoveRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetRemoveRequest

// optional .crdt.ResourceObject object = 1;
bool SetRemoveRequest::has_object() const {
  return !_is_default_instance_ && object_ != NULL;
}
void SetRemoveRequest::clear_object() {
  if (GetArenaNoVirtual() == NULL && object_ != NULL) delete object_;
  object_ = NULL;
}
const ::crdt::ResourceObject& SetRemoveRequest::object() const {
  // @@protoc_insertion_point(field_get:crdt.SetRemoveRequest.object)
  return object_ != NULL ? *object_ : *default_instance_->object_;
}
::crdt::ResourceObject* SetRemoveRequest::mutable_object() {
  
  if (object_ == NULL) {
    object_ = new ::crdt::ResourceObject;
  }
  // @@protoc_insertion_point(field_mutable:crdt.SetRemoveRequest.object)
  return object_;
}
::crdt::ResourceObject* SetRemoveRequest::release_object() {
  
  ::crdt::ResourceObject* temp = object_;
  object_ = NULL;
  return temp;
}
void SetRemoveRequest::set_allocated_object(::crdt::ResourceObject* object) {
  delete object_;
  object_ = object;
  if (object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.SetRemoveRequest.object)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetRemoveResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetRemoveResponse::SetRemoveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.SetRemoveResponse)
}

void SetRemoveResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::crdt::Status*>(&::crdt::Status::default_instance());
}

SetRemoveResponse::SetRemoveResponse(const SetRemoveResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.SetRemoveResponse)
}

void SetRemoveResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
}

SetRemoveResponse::~SetRemoveResponse() {
  // @@protoc_insertion_point(destructor:crdt.SetRemoveResponse)
  SharedDtor();
}

void SetRemoveResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void SetRemoveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetRemoveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetRemoveResponse_descriptor_;
}

const SetRemoveResponse& SetRemoveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

SetRemoveResponse* SetRemoveResponse::default_instance_ = NULL;

SetRemoveResponse* SetRemoveResponse::New(::google::protobuf::Arena* arena) const {
  SetRemoveResponse* n = new SetRemoveResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetRemoveResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}

bool SetRemoveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.SetRemoveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crdt.Status status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.SetRemoveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.SetRemoveResponse)
  return false;
#undef DO_
}

void SetRemoveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.SetRemoveResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.SetRemoveResponse)
}

::google::protobuf::uint8* SetRemoveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.SetRemoveResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->status_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.SetRemoveResponse)
  return target;
}

int SetRemoveResponse::ByteSize() const {
  int total_size = 0;

  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetRemoveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetRemoveResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetRemoveResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetRemoveResponse::MergeFrom(const SetRemoveResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_status()) {
    mutable_status()->::crdt::Status::MergeFrom(from.status());
  }
}

void SetRemoveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetRemoveResponse::CopyFrom(const SetRemoveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRemoveResponse::IsInitialized() const {

  return true;
}

void SetRemoveResponse::Swap(SetRemoveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetRemoveResponse::InternalSwap(SetRemoveResponse* other) {
  std::swap(status_, other->status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetRemoveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetRemoveResponse_descriptor_;
  metadata.reflection = SetRemoveResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetRemoveResponse

// optional .crdt.Status status = 1;
bool SetRemoveResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void SetRemoveResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::crdt::Status& SetRemoveResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.SetRemoveResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::crdt::Status* SetRemoveResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.SetRemoveResponse.status)
  return status_;
}
::crdt::Status* SetRemoveResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void SetRemoveResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.SetRemoveResponse.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetLengthRequest::kReferenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetLengthRequest::SetLengthRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.SetLengthRequest)
}

void SetLengthRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SetLengthRequest::SetLengthRequest(const SetLengthRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.SetLengthRequest)
}

void SetLengthRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  referenceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SetLengthRequest::~SetLengthRequest() {
  // @@protoc_insertion_point(destructor:crdt.SetLengthRequest)
  SharedDtor();
}

void SetLengthRequest::SharedDtor() {
  referenceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void SetLengthRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetLengthRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetLengthRequest_descriptor_;
}

const SetLengthRequest& SetLengthRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

SetLengthRequest* SetLengthRequest::default_instance_ = NULL;

SetLengthRequest* SetLengthRequest::New(::google::protobuf::Arena* arena) const {
  SetLengthRequest* n = new SetLengthRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetLengthRequest::Clear() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SetLengthRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.SetLengthRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string referenceId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referenceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->referenceid().data(), this->referenceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "crdt.SetLengthRequest.referenceId"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.SetLengthRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.SetLengthRequest)
  return false;
#undef DO_
}

void SetLengthRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.SetLengthRequest)
  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.SetLengthRequest.referenceId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->referenceid(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.SetLengthRequest)
}

::google::protobuf::uint8* SetLengthRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.SetLengthRequest)
  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referenceid().data(), this->referenceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "crdt.SetLengthRequest.referenceId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->referenceid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.SetLengthRequest)
  return target;
}

int SetLengthRequest::ByteSize() const {
  int total_size = 0;

  // optional string referenceId = 1;
  if (this->referenceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->referenceid());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetLengthRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetLengthRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetLengthRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetLengthRequest::MergeFrom(const SetLengthRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.referenceid().size() > 0) {

    referenceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referenceid_);
  }
}

void SetLengthRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLengthRequest::CopyFrom(const SetLengthRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLengthRequest::IsInitialized() const {

  return true;
}

void SetLengthRequest::Swap(SetLengthRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetLengthRequest::InternalSwap(SetLengthRequest* other) {
  referenceid_.Swap(&other->referenceid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetLengthRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetLengthRequest_descriptor_;
  metadata.reflection = SetLengthRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetLengthRequest

// optional string referenceId = 1;
void SetLengthRequest::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& SetLengthRequest::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.SetLengthRequest.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetLengthRequest::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.SetLengthRequest.referenceId)
}
 void SetLengthRequest::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.SetLengthRequest.referenceId)
}
 void SetLengthRequest::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.SetLengthRequest.referenceId)
}
 ::std::string* SetLengthRequest::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.SetLengthRequest.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* SetLengthRequest::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void SetLengthRequest::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.SetLengthRequest.referenceId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetLengthResponse::kStatusFieldNumber;
const int SetLengthResponse::kLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetLengthResponse::SetLengthResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.SetLengthResponse)
}

void SetLengthResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::crdt::Status*>(&::crdt::Status::default_instance());
}

SetLengthResponse::SetLengthResponse(const SetLengthResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.SetLengthResponse)
}

void SetLengthResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
  length_ = GOOGLE_ULONGLONG(0);
}

SetLengthResponse::~SetLengthResponse() {
  // @@protoc_insertion_point(destructor:crdt.SetLengthResponse)
  SharedDtor();
}

void SetLengthResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void SetLengthResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetLengthResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetLengthResponse_descriptor_;
}

const SetLengthResponse& SetLengthResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

SetLengthResponse* SetLengthResponse::default_instance_ = NULL;

SetLengthResponse* SetLengthResponse::New(::google::protobuf::Arena* arena) const {
  SetLengthResponse* n = new SetLengthResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetLengthResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
  length_ = GOOGLE_ULONGLONG(0);
}

bool SetLengthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.SetLengthResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crdt.Status status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional uint64 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &length_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.SetLengthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.SetLengthResponse)
  return false;
#undef DO_
}

void SetLengthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.SetLengthResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // optional uint64 length = 2;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->length(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.SetLengthResponse)
}

::google::protobuf::uint8* SetLengthResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.SetLengthResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->status_, target);
  }

  // optional uint64 length = 2;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->length(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.SetLengthResponse)
  return target;
}

int SetLengthResponse::ByteSize() const {
  int total_size = 0;

  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // optional uint64 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->length());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetLengthResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetLengthResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetLengthResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetLengthResponse::MergeFrom(const SetLengthResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_status()) {
    mutable_status()->::crdt::Status::MergeFrom(from.status());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
}

void SetLengthResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetLengthResponse::CopyFrom(const SetLengthResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetLengthResponse::IsInitialized() const {

  return true;
}

void SetLengthResponse::Swap(SetLengthResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetLengthResponse::InternalSwap(SetLengthResponse* other) {
  std::swap(status_, other->status_);
  std::swap(length_, other->length_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetLengthResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetLengthResponse_descriptor_;
  metadata.reflection = SetLengthResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetLengthResponse

// optional .crdt.Status status = 1;
bool SetLengthResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void SetLengthResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::crdt::Status& SetLengthResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.SetLengthResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::crdt::Status* SetLengthResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.SetLengthResponse.status)
  return status_;
}
::crdt::Status* SetLengthResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void SetLengthResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.SetLengthResponse.status)
}

// optional uint64 length = 2;
void SetLengthResponse::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
}
 ::google::protobuf::uint64 SetLengthResponse::length() const {
  // @@protoc_insertion_point(field_get:crdt.SetLengthResponse.length)
  return length_;
}
 void SetLengthResponse::set_length(::google::protobuf::uint64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:crdt.SetLengthResponse.length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetContainsRequest::kObjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetContainsRequest::SetContainsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.SetContainsRequest)
}

void SetContainsRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  object_ = const_cast< ::crdt::ResourceObject*>(&::crdt::ResourceObject::default_instance());
}

SetContainsRequest::SetContainsRequest(const SetContainsRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.SetContainsRequest)
}

void SetContainsRequest::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  object_ = NULL;
}

SetContainsRequest::~SetContainsRequest() {
  // @@protoc_insertion_point(destructor:crdt.SetContainsRequest)
  SharedDtor();
}

void SetContainsRequest::SharedDtor() {
  if (this != default_instance_) {
    delete object_;
  }
}

void SetContainsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetContainsRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetContainsRequest_descriptor_;
}

const SetContainsRequest& SetContainsRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

SetContainsRequest* SetContainsRequest::default_instance_ = NULL;

SetContainsRequest* SetContainsRequest::New(::google::protobuf::Arena* arena) const {
  SetContainsRequest* n = new SetContainsRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetContainsRequest::Clear() {
  if (GetArenaNoVirtual() == NULL && object_ != NULL) delete object_;
  object_ = NULL;
}

bool SetContainsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.SetContainsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crdt.ResourceObject object = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.SetContainsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.SetContainsRequest)
  return false;
#undef DO_
}

void SetContainsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.SetContainsRequest)
  // optional .crdt.ResourceObject object = 1;
  if (this->has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->object_, output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.SetContainsRequest)
}

::google::protobuf::uint8* SetContainsRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.SetContainsRequest)
  // optional .crdt.ResourceObject object = 1;
  if (this->has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->object_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.SetContainsRequest)
  return target;
}

int SetContainsRequest::ByteSize() const {
  int total_size = 0;

  // optional .crdt.ResourceObject object = 1;
  if (this->has_object()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->object_);
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetContainsRequest::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetContainsRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetContainsRequest>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetContainsRequest::MergeFrom(const SetContainsRequest& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_object()) {
    mutable_object()->::crdt::ResourceObject::MergeFrom(from.object());
  }
}

void SetContainsRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetContainsRequest::CopyFrom(const SetContainsRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetContainsRequest::IsInitialized() const {

  return true;
}

void SetContainsRequest::Swap(SetContainsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetContainsRequest::InternalSwap(SetContainsRequest* other) {
  std::swap(object_, other->object_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetContainsRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetContainsRequest_descriptor_;
  metadata.reflection = SetContainsRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetContainsRequest

// optional .crdt.ResourceObject object = 1;
bool SetContainsRequest::has_object() const {
  return !_is_default_instance_ && object_ != NULL;
}
void SetContainsRequest::clear_object() {
  if (GetArenaNoVirtual() == NULL && object_ != NULL) delete object_;
  object_ = NULL;
}
const ::crdt::ResourceObject& SetContainsRequest::object() const {
  // @@protoc_insertion_point(field_get:crdt.SetContainsRequest.object)
  return object_ != NULL ? *object_ : *default_instance_->object_;
}
::crdt::ResourceObject* SetContainsRequest::mutable_object() {
  
  if (object_ == NULL) {
    object_ = new ::crdt::ResourceObject;
  }
  // @@protoc_insertion_point(field_mutable:crdt.SetContainsRequest.object)
  return object_;
}
::crdt::ResourceObject* SetContainsRequest::release_object() {
  
  ::crdt::ResourceObject* temp = object_;
  object_ = NULL;
  return temp;
}
void SetContainsRequest::set_allocated_object(::crdt::ResourceObject* object) {
  delete object_;
  object_ = object;
  if (object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.SetContainsRequest.object)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetContainsResponse::kStatusFieldNumber;
const int SetContainsResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetContainsResponse::SetContainsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:crdt.SetContainsResponse)
}

void SetContainsResponse::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  status_ = const_cast< ::crdt::Status*>(&::crdt::Status::default_instance());
}

SetContainsResponse::SetContainsResponse(const SetContainsResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:crdt.SetContainsResponse)
}

void SetContainsResponse::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  status_ = NULL;
  result_ = false;
}

SetContainsResponse::~SetContainsResponse() {
  // @@protoc_insertion_point(destructor:crdt.SetContainsResponse)
  SharedDtor();
}

void SetContainsResponse::SharedDtor() {
  if (this != default_instance_) {
    delete status_;
  }
}

void SetContainsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetContainsResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SetContainsResponse_descriptor_;
}

const SetContainsResponse& SetContainsResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_crdt_2eproto();
  return *default_instance_;
}

SetContainsResponse* SetContainsResponse::default_instance_ = NULL;

SetContainsResponse* SetContainsResponse::New(::google::protobuf::Arena* arena) const {
  SetContainsResponse* n = new SetContainsResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetContainsResponse::Clear() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
  result_ = false;
}

bool SetContainsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:crdt.SetContainsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .crdt.Status status = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional bool result = 2;
      case 2: {
        if (tag == 16) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));

        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:crdt.SetContainsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:crdt.SetContainsResponse)
  return false;
#undef DO_
}

void SetContainsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:crdt.SetContainsResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->status_, output);
  }

  // optional bool result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->result(), output);
  }

  // @@protoc_insertion_point(serialize_end:crdt.SetContainsResponse)
}

::google::protobuf::uint8* SetContainsResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:crdt.SetContainsResponse)
  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->status_, target);
  }

  // optional bool result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->result(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:crdt.SetContainsResponse)
  return target;
}

int SetContainsResponse::ByteSize() const {
  int total_size = 0;

  // optional .crdt.Status status = 1;
  if (this->has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->status_);
  }

  // optional bool result = 2;
  if (this->result() != 0) {
    total_size += 1 + 1;
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetContainsResponse::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const SetContainsResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SetContainsResponse>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SetContainsResponse::MergeFrom(const SetContainsResponse& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from.has_status()) {
    mutable_status()->::crdt::Status::MergeFrom(from.status());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void SetContainsResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetContainsResponse::CopyFrom(const SetContainsResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetContainsResponse::IsInitialized() const {

  return true;
}

void SetContainsResponse::Swap(SetContainsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetContainsResponse::InternalSwap(SetContainsResponse* other) {
  std::swap(status_, other->status_);
  std::swap(result_, other->result_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetContainsResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SetContainsResponse_descriptor_;
  metadata.reflection = SetContainsResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetContainsResponse

// optional .crdt.Status status = 1;
bool SetContainsResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
void SetContainsResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
const ::crdt::Status& SetContainsResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.SetContainsResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
::crdt::Status* SetContainsResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.SetContainsResponse.status)
  return status_;
}
::crdt::Status* SetContainsResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
void SetContainsResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.SetContainsResponse.status)
}

// optional bool result = 2;
void SetContainsResponse::clear_result() {
  result_ = false;
}
 bool SetContainsResponse::result() const {
  // @@protoc_insertion_point(field_get:crdt.SetContainsResponse.result)
  return result_;
}
 void SetContainsResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:crdt.SetContainsResponse.result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace crdt

// @@protoc_insertion_point(global_scope)
