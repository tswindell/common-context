// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: crdt.proto

#include "crdt.pb.h"
#include "crdt.grpc.pb.h"

#include <grpc++/channel.h>
#include <grpc++/impl/client_unary_call.h>
#include <grpc++/impl/rpc_service_method.h>
#include <grpc++/impl/service_type.h>
#include <grpc++/support/async_unary_call.h>
#include <grpc++/support/async_stream.h>
#include <grpc++/support/sync_stream.h>
namespace crdt {

static const char* CRDT_method_names[] = {
  "/crdt.CRDT/Create",
  "/crdt.CRDT/Attach",
  "/crdt.CRDT/Detach",
  "/crdt.CRDT/Commit",
  "/crdt.CRDT/Equals",
  "/crdt.CRDT/Merge",
  "/crdt.CRDT/Clone",
  "/crdt.CRDT/SupportedTypes",
  "/crdt.CRDT/IsSupportedType",
  "/crdt.CRDT/SupportedStorageTypes",
  "/crdt.CRDT/IsSupportedStorageType",
  "/crdt.CRDT/SupportedCryptoMethods",
  "/crdt.CRDT/IsSupportedCryptoMethod",
};

std::unique_ptr< CRDT::Stub> CRDT::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< CRDT::Stub> stub(new CRDT::Stub(channel));
  return stub;
}

CRDT::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_Create_(CRDT_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Attach_(CRDT_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Detach_(CRDT_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Commit_(CRDT_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Equals_(CRDT_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Merge_(CRDT_method_names[5], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Clone_(CRDT_method_names[6], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SupportedTypes_(CRDT_method_names[7], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsSupportedType_(CRDT_method_names[8], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SupportedStorageTypes_(CRDT_method_names[9], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsSupportedStorageType_(CRDT_method_names[10], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SupportedCryptoMethods_(CRDT_method_names[11], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_IsSupportedCryptoMethod_(CRDT_method_names[12], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status CRDT::Stub::Create(::grpc::ClientContext* context, const ::crdt::CreateRequest& request, ::crdt::CreateResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Create_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::CreateResponse>* CRDT::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::crdt::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::CreateResponse>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::Status CRDT::Stub::Attach(::grpc::ClientContext* context, const ::crdt::AttachRequest& request, ::crdt::AttachResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Attach_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::AttachResponse>* CRDT::Stub::AsyncAttachRaw(::grpc::ClientContext* context, const ::crdt::AttachRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::AttachResponse>(channel_.get(), cq, rpcmethod_Attach_, context, request);
}

::grpc::Status CRDT::Stub::Detach(::grpc::ClientContext* context, const ::crdt::DetachRequest& request, ::crdt::DetachResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Detach_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::DetachResponse>* CRDT::Stub::AsyncDetachRaw(::grpc::ClientContext* context, const ::crdt::DetachRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::DetachResponse>(channel_.get(), cq, rpcmethod_Detach_, context, request);
}

::grpc::Status CRDT::Stub::Commit(::grpc::ClientContext* context, const ::crdt::CommitRequest& request, ::crdt::CommitResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Commit_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::CommitResponse>* CRDT::Stub::AsyncCommitRaw(::grpc::ClientContext* context, const ::crdt::CommitRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::CommitResponse>(channel_.get(), cq, rpcmethod_Commit_, context, request);
}

::grpc::Status CRDT::Stub::Equals(::grpc::ClientContext* context, const ::crdt::EqualsRequest& request, ::crdt::EqualsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Equals_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::EqualsResponse>* CRDT::Stub::AsyncEqualsRaw(::grpc::ClientContext* context, const ::crdt::EqualsRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::EqualsResponse>(channel_.get(), cq, rpcmethod_Equals_, context, request);
}

::grpc::Status CRDT::Stub::Merge(::grpc::ClientContext* context, const ::crdt::MergeRequest& request, ::crdt::MergeResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Merge_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::MergeResponse>* CRDT::Stub::AsyncMergeRaw(::grpc::ClientContext* context, const ::crdt::MergeRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::MergeResponse>(channel_.get(), cq, rpcmethod_Merge_, context, request);
}

::grpc::Status CRDT::Stub::Clone(::grpc::ClientContext* context, const ::crdt::CloneRequest& request, ::crdt::CloneResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Clone_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::CloneResponse>* CRDT::Stub::AsyncCloneRaw(::grpc::ClientContext* context, const ::crdt::CloneRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::CloneResponse>(channel_.get(), cq, rpcmethod_Clone_, context, request);
}

::grpc::Status CRDT::Stub::SupportedTypes(::grpc::ClientContext* context, const ::crdt::EmptyMessage& request, ::crdt::SupportedTypesResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SupportedTypes_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::SupportedTypesResponse>* CRDT::Stub::AsyncSupportedTypesRaw(::grpc::ClientContext* context, const ::crdt::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::SupportedTypesResponse>(channel_.get(), cq, rpcmethod_SupportedTypes_, context, request);
}

::grpc::Status CRDT::Stub::IsSupportedType(::grpc::ClientContext* context, const ::crdt::TypeMessage& request, ::crdt::BooleanResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_IsSupportedType_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::BooleanResponse>* CRDT::Stub::AsyncIsSupportedTypeRaw(::grpc::ClientContext* context, const ::crdt::TypeMessage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::BooleanResponse>(channel_.get(), cq, rpcmethod_IsSupportedType_, context, request);
}

::grpc::Status CRDT::Stub::SupportedStorageTypes(::grpc::ClientContext* context, const ::crdt::EmptyMessage& request, ::crdt::SupportedStorageTypesResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SupportedStorageTypes_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::SupportedStorageTypesResponse>* CRDT::Stub::AsyncSupportedStorageTypesRaw(::grpc::ClientContext* context, const ::crdt::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::SupportedStorageTypesResponse>(channel_.get(), cq, rpcmethod_SupportedStorageTypes_, context, request);
}

::grpc::Status CRDT::Stub::IsSupportedStorageType(::grpc::ClientContext* context, const ::crdt::TypeMessage& request, ::crdt::BooleanResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_IsSupportedStorageType_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::BooleanResponse>* CRDT::Stub::AsyncIsSupportedStorageTypeRaw(::grpc::ClientContext* context, const ::crdt::TypeMessage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::BooleanResponse>(channel_.get(), cq, rpcmethod_IsSupportedStorageType_, context, request);
}

::grpc::Status CRDT::Stub::SupportedCryptoMethods(::grpc::ClientContext* context, const ::crdt::EmptyMessage& request, ::crdt::SupportedCryptoMethodsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_SupportedCryptoMethods_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::SupportedCryptoMethodsResponse>* CRDT::Stub::AsyncSupportedCryptoMethodsRaw(::grpc::ClientContext* context, const ::crdt::EmptyMessage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::SupportedCryptoMethodsResponse>(channel_.get(), cq, rpcmethod_SupportedCryptoMethods_, context, request);
}

::grpc::Status CRDT::Stub::IsSupportedCryptoMethod(::grpc::ClientContext* context, const ::crdt::TypeMessage& request, ::crdt::BooleanResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_IsSupportedCryptoMethod_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::BooleanResponse>* CRDT::Stub::AsyncIsSupportedCryptoMethodRaw(::grpc::ClientContext* context, const ::crdt::TypeMessage& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::BooleanResponse>(channel_.get(), cq, rpcmethod_IsSupportedCryptoMethod_, context, request);
}

CRDT::AsyncService::AsyncService() : ::grpc::AsynchronousService(CRDT_method_names, 13) {}

CRDT::Service::~Service() {
  delete service_;
}

::grpc::Status CRDT::Service::Create(::grpc::ServerContext* context, const ::crdt::CreateRequest* request, ::crdt::CreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CRDT::AsyncService::RequestCreate(::grpc::ServerContext* context, ::crdt::CreateRequest* request, ::grpc::ServerAsyncResponseWriter< ::crdt::CreateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status CRDT::Service::Attach(::grpc::ServerContext* context, const ::crdt::AttachRequest* request, ::crdt::AttachResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CRDT::AsyncService::RequestAttach(::grpc::ServerContext* context, ::crdt::AttachRequest* request, ::grpc::ServerAsyncResponseWriter< ::crdt::AttachResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status CRDT::Service::Detach(::grpc::ServerContext* context, const ::crdt::DetachRequest* request, ::crdt::DetachResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CRDT::AsyncService::RequestDetach(::grpc::ServerContext* context, ::crdt::DetachRequest* request, ::grpc::ServerAsyncResponseWriter< ::crdt::DetachResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status CRDT::Service::Commit(::grpc::ServerContext* context, const ::crdt::CommitRequest* request, ::crdt::CommitResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CRDT::AsyncService::RequestCommit(::grpc::ServerContext* context, ::crdt::CommitRequest* request, ::grpc::ServerAsyncResponseWriter< ::crdt::CommitResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status CRDT::Service::Equals(::grpc::ServerContext* context, const ::crdt::EqualsRequest* request, ::crdt::EqualsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CRDT::AsyncService::RequestEquals(::grpc::ServerContext* context, ::crdt::EqualsRequest* request, ::grpc::ServerAsyncResponseWriter< ::crdt::EqualsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status CRDT::Service::Merge(::grpc::ServerContext* context, const ::crdt::MergeRequest* request, ::crdt::MergeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CRDT::AsyncService::RequestMerge(::grpc::ServerContext* context, ::crdt::MergeRequest* request, ::grpc::ServerAsyncResponseWriter< ::crdt::MergeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status CRDT::Service::Clone(::grpc::ServerContext* context, const ::crdt::CloneRequest* request, ::crdt::CloneResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CRDT::AsyncService::RequestClone(::grpc::ServerContext* context, ::crdt::CloneRequest* request, ::grpc::ServerAsyncResponseWriter< ::crdt::CloneResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status CRDT::Service::SupportedTypes(::grpc::ServerContext* context, const ::crdt::EmptyMessage* request, ::crdt::SupportedTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CRDT::AsyncService::RequestSupportedTypes(::grpc::ServerContext* context, ::crdt::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::crdt::SupportedTypesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status CRDT::Service::IsSupportedType(::grpc::ServerContext* context, const ::crdt::TypeMessage* request, ::crdt::BooleanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CRDT::AsyncService::RequestIsSupportedType(::grpc::ServerContext* context, ::crdt::TypeMessage* request, ::grpc::ServerAsyncResponseWriter< ::crdt::BooleanResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status CRDT::Service::SupportedStorageTypes(::grpc::ServerContext* context, const ::crdt::EmptyMessage* request, ::crdt::SupportedStorageTypesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CRDT::AsyncService::RequestSupportedStorageTypes(::grpc::ServerContext* context, ::crdt::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::crdt::SupportedStorageTypesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status CRDT::Service::IsSupportedStorageType(::grpc::ServerContext* context, const ::crdt::TypeMessage* request, ::crdt::BooleanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CRDT::AsyncService::RequestIsSupportedStorageType(::grpc::ServerContext* context, ::crdt::TypeMessage* request, ::grpc::ServerAsyncResponseWriter< ::crdt::BooleanResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status CRDT::Service::SupportedCryptoMethods(::grpc::ServerContext* context, const ::crdt::EmptyMessage* request, ::crdt::SupportedCryptoMethodsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CRDT::AsyncService::RequestSupportedCryptoMethods(::grpc::ServerContext* context, ::crdt::EmptyMessage* request, ::grpc::ServerAsyncResponseWriter< ::crdt::SupportedCryptoMethodsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status CRDT::Service::IsSupportedCryptoMethod(::grpc::ServerContext* context, const ::crdt::TypeMessage* request, ::crdt::BooleanResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void CRDT::AsyncService::RequestIsSupportedCryptoMethod(::grpc::ServerContext* context, ::crdt::TypeMessage* request, ::grpc::ServerAsyncResponseWriter< ::crdt::BooleanResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* CRDT::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CRDT_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CRDT::Service, ::crdt::CreateRequest, ::crdt::CreateResponse>(
          std::mem_fn(&CRDT::Service::Create), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CRDT_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CRDT::Service, ::crdt::AttachRequest, ::crdt::AttachResponse>(
          std::mem_fn(&CRDT::Service::Attach), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CRDT_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CRDT::Service, ::crdt::DetachRequest, ::crdt::DetachResponse>(
          std::mem_fn(&CRDT::Service::Detach), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CRDT_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CRDT::Service, ::crdt::CommitRequest, ::crdt::CommitResponse>(
          std::mem_fn(&CRDT::Service::Commit), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CRDT_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CRDT::Service, ::crdt::EqualsRequest, ::crdt::EqualsResponse>(
          std::mem_fn(&CRDT::Service::Equals), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CRDT_method_names[5],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CRDT::Service, ::crdt::MergeRequest, ::crdt::MergeResponse>(
          std::mem_fn(&CRDT::Service::Merge), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CRDT_method_names[6],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CRDT::Service, ::crdt::CloneRequest, ::crdt::CloneResponse>(
          std::mem_fn(&CRDT::Service::Clone), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CRDT_method_names[7],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CRDT::Service, ::crdt::EmptyMessage, ::crdt::SupportedTypesResponse>(
          std::mem_fn(&CRDT::Service::SupportedTypes), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CRDT_method_names[8],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CRDT::Service, ::crdt::TypeMessage, ::crdt::BooleanResponse>(
          std::mem_fn(&CRDT::Service::IsSupportedType), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CRDT_method_names[9],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CRDT::Service, ::crdt::EmptyMessage, ::crdt::SupportedStorageTypesResponse>(
          std::mem_fn(&CRDT::Service::SupportedStorageTypes), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CRDT_method_names[10],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CRDT::Service, ::crdt::TypeMessage, ::crdt::BooleanResponse>(
          std::mem_fn(&CRDT::Service::IsSupportedStorageType), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CRDT_method_names[11],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CRDT::Service, ::crdt::EmptyMessage, ::crdt::SupportedCryptoMethodsResponse>(
          std::mem_fn(&CRDT::Service::SupportedCryptoMethods), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      CRDT_method_names[12],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< CRDT::Service, ::crdt::TypeMessage, ::crdt::BooleanResponse>(
          std::mem_fn(&CRDT::Service::IsSupportedCryptoMethod), this)));
  return service_;
}


static const char* GrowOnlySet_method_names[] = {
  "/crdt.GrowOnlySet/List",
  "/crdt.GrowOnlySet/Insert",
  "/crdt.GrowOnlySet/Length",
  "/crdt.GrowOnlySet/Contains",
};

std::unique_ptr< GrowOnlySet::Stub> GrowOnlySet::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< GrowOnlySet::Stub> stub(new GrowOnlySet::Stub(channel));
  return stub;
}

GrowOnlySet::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_List_(GrowOnlySet_method_names[0], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Insert_(GrowOnlySet_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Length_(GrowOnlySet_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Contains_(GrowOnlySet_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::crdt::ResourceObject>* GrowOnlySet::Stub::ListRaw(::grpc::ClientContext* context, const ::crdt::SetListRequest& request) {
  return new ::grpc::ClientReader< ::crdt::ResourceObject>(channel_.get(), rpcmethod_List_, context, request);
}

::grpc::ClientAsyncReader< ::crdt::ResourceObject>* GrowOnlySet::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::crdt::SetListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::crdt::ResourceObject>(channel_.get(), cq, rpcmethod_List_, context, request, tag);
}

::grpc::Status GrowOnlySet::Stub::Insert(::grpc::ClientContext* context, const ::crdt::SetInsertRequest& request, ::crdt::SetInsertResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Insert_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::SetInsertResponse>* GrowOnlySet::Stub::AsyncInsertRaw(::grpc::ClientContext* context, const ::crdt::SetInsertRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::SetInsertResponse>(channel_.get(), cq, rpcmethod_Insert_, context, request);
}

::grpc::Status GrowOnlySet::Stub::Length(::grpc::ClientContext* context, const ::crdt::SetLengthRequest& request, ::crdt::SetLengthResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Length_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::SetLengthResponse>* GrowOnlySet::Stub::AsyncLengthRaw(::grpc::ClientContext* context, const ::crdt::SetLengthRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::SetLengthResponse>(channel_.get(), cq, rpcmethod_Length_, context, request);
}

::grpc::Status GrowOnlySet::Stub::Contains(::grpc::ClientContext* context, const ::crdt::SetContainsRequest& request, ::crdt::SetContainsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Contains_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::SetContainsResponse>* GrowOnlySet::Stub::AsyncContainsRaw(::grpc::ClientContext* context, const ::crdt::SetContainsRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::SetContainsResponse>(channel_.get(), cq, rpcmethod_Contains_, context, request);
}

GrowOnlySet::AsyncService::AsyncService() : ::grpc::AsynchronousService(GrowOnlySet_method_names, 4) {}

GrowOnlySet::Service::~Service() {
  delete service_;
}

::grpc::Status GrowOnlySet::Service::List(::grpc::ServerContext* context, const ::crdt::SetListRequest* request, ::grpc::ServerWriter< ::crdt::ResourceObject>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GrowOnlySet::AsyncService::RequestList(::grpc::ServerContext* context, ::crdt::SetListRequest* request, ::grpc::ServerAsyncWriter< ::crdt::ResourceObject>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status GrowOnlySet::Service::Insert(::grpc::ServerContext* context, const ::crdt::SetInsertRequest* request, ::crdt::SetInsertResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GrowOnlySet::AsyncService::RequestInsert(::grpc::ServerContext* context, ::crdt::SetInsertRequest* request, ::grpc::ServerAsyncResponseWriter< ::crdt::SetInsertResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GrowOnlySet::Service::Length(::grpc::ServerContext* context, const ::crdt::SetLengthRequest* request, ::crdt::SetLengthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GrowOnlySet::AsyncService::RequestLength(::grpc::ServerContext* context, ::crdt::SetLengthRequest* request, ::grpc::ServerAsyncResponseWriter< ::crdt::SetLengthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status GrowOnlySet::Service::Contains(::grpc::ServerContext* context, const ::crdt::SetContainsRequest* request, ::crdt::SetContainsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void GrowOnlySet::AsyncService::RequestContains(::grpc::ServerContext* context, ::crdt::SetContainsRequest* request, ::grpc::ServerAsyncResponseWriter< ::crdt::SetContainsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* GrowOnlySet::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GrowOnlySet_method_names[0],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< GrowOnlySet::Service, ::crdt::SetListRequest, ::crdt::ResourceObject>(
          std::mem_fn(&GrowOnlySet::Service::List), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GrowOnlySet_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GrowOnlySet::Service, ::crdt::SetInsertRequest, ::crdt::SetInsertResponse>(
          std::mem_fn(&GrowOnlySet::Service::Insert), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GrowOnlySet_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GrowOnlySet::Service, ::crdt::SetLengthRequest, ::crdt::SetLengthResponse>(
          std::mem_fn(&GrowOnlySet::Service::Length), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      GrowOnlySet_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< GrowOnlySet::Service, ::crdt::SetContainsRequest, ::crdt::SetContainsResponse>(
          std::mem_fn(&GrowOnlySet::Service::Contains), this)));
  return service_;
}


static const char* TwoPhaseSet_method_names[] = {
  "/crdt.TwoPhaseSet/List",
  "/crdt.TwoPhaseSet/Insert",
  "/crdt.TwoPhaseSet/Remove",
  "/crdt.TwoPhaseSet/Length",
  "/crdt.TwoPhaseSet/Contains",
};

std::unique_ptr< TwoPhaseSet::Stub> TwoPhaseSet::NewStub(const std::shared_ptr< ::grpc::Channel>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< TwoPhaseSet::Stub> stub(new TwoPhaseSet::Stub(channel));
  return stub;
}

TwoPhaseSet::Stub::Stub(const std::shared_ptr< ::grpc::Channel>& channel)
  : channel_(channel), rpcmethod_List_(TwoPhaseSet_method_names[0], ::grpc::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Insert_(TwoPhaseSet_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Remove_(TwoPhaseSet_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Length_(TwoPhaseSet_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Contains_(TwoPhaseSet_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::crdt::ResourceObject>* TwoPhaseSet::Stub::ListRaw(::grpc::ClientContext* context, const ::crdt::SetListRequest& request) {
  return new ::grpc::ClientReader< ::crdt::ResourceObject>(channel_.get(), rpcmethod_List_, context, request);
}

::grpc::ClientAsyncReader< ::crdt::ResourceObject>* TwoPhaseSet::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::crdt::SetListRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return new ::grpc::ClientAsyncReader< ::crdt::ResourceObject>(channel_.get(), cq, rpcmethod_List_, context, request, tag);
}

::grpc::Status TwoPhaseSet::Stub::Insert(::grpc::ClientContext* context, const ::crdt::SetInsertRequest& request, ::crdt::SetInsertResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Insert_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::SetInsertResponse>* TwoPhaseSet::Stub::AsyncInsertRaw(::grpc::ClientContext* context, const ::crdt::SetInsertRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::SetInsertResponse>(channel_.get(), cq, rpcmethod_Insert_, context, request);
}

::grpc::Status TwoPhaseSet::Stub::Remove(::grpc::ClientContext* context, const ::crdt::SetRemoveRequest& request, ::crdt::SetRemoveResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Remove_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::SetRemoveResponse>* TwoPhaseSet::Stub::AsyncRemoveRaw(::grpc::ClientContext* context, const ::crdt::SetRemoveRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::SetRemoveResponse>(channel_.get(), cq, rpcmethod_Remove_, context, request);
}

::grpc::Status TwoPhaseSet::Stub::Length(::grpc::ClientContext* context, const ::crdt::SetLengthRequest& request, ::crdt::SetLengthResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Length_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::SetLengthResponse>* TwoPhaseSet::Stub::AsyncLengthRaw(::grpc::ClientContext* context, const ::crdt::SetLengthRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::SetLengthResponse>(channel_.get(), cq, rpcmethod_Length_, context, request);
}

::grpc::Status TwoPhaseSet::Stub::Contains(::grpc::ClientContext* context, const ::crdt::SetContainsRequest& request, ::crdt::SetContainsResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Contains_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::crdt::SetContainsResponse>* TwoPhaseSet::Stub::AsyncContainsRaw(::grpc::ClientContext* context, const ::crdt::SetContainsRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::crdt::SetContainsResponse>(channel_.get(), cq, rpcmethod_Contains_, context, request);
}

TwoPhaseSet::AsyncService::AsyncService() : ::grpc::AsynchronousService(TwoPhaseSet_method_names, 5) {}

TwoPhaseSet::Service::~Service() {
  delete service_;
}

::grpc::Status TwoPhaseSet::Service::List(::grpc::ServerContext* context, const ::crdt::SetListRequest* request, ::grpc::ServerWriter< ::crdt::ResourceObject>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void TwoPhaseSet::AsyncService::RequestList(::grpc::ServerContext* context, ::crdt::SetListRequest* request, ::grpc::ServerAsyncWriter< ::crdt::ResourceObject>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
}

::grpc::Status TwoPhaseSet::Service::Insert(::grpc::ServerContext* context, const ::crdt::SetInsertRequest* request, ::crdt::SetInsertResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void TwoPhaseSet::AsyncService::RequestInsert(::grpc::ServerContext* context, ::crdt::SetInsertRequest* request, ::grpc::ServerAsyncResponseWriter< ::crdt::SetInsertResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status TwoPhaseSet::Service::Remove(::grpc::ServerContext* context, const ::crdt::SetRemoveRequest* request, ::crdt::SetRemoveResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void TwoPhaseSet::AsyncService::RequestRemove(::grpc::ServerContext* context, ::crdt::SetRemoveRequest* request, ::grpc::ServerAsyncResponseWriter< ::crdt::SetRemoveResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status TwoPhaseSet::Service::Length(::grpc::ServerContext* context, const ::crdt::SetLengthRequest* request, ::crdt::SetLengthResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void TwoPhaseSet::AsyncService::RequestLength(::grpc::ServerContext* context, ::crdt::SetLengthRequest* request, ::grpc::ServerAsyncResponseWriter< ::crdt::SetLengthResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::Status TwoPhaseSet::Service::Contains(::grpc::ServerContext* context, const ::crdt::SetContainsRequest* request, ::crdt::SetContainsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

void TwoPhaseSet::AsyncService::RequestContains(::grpc::ServerContext* context, ::crdt::SetContainsRequest* request, ::grpc::ServerAsyncResponseWriter< ::crdt::SetContainsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
  AsynchronousService::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
}

::grpc::RpcService* TwoPhaseSet::Service::service() {
  if (service_ != nullptr) {
    return service_;
  }
  service_ = new ::grpc::RpcService();
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      TwoPhaseSet_method_names[0],
      ::grpc::RpcMethod::SERVER_STREAMING,
      new ::grpc::ServerStreamingHandler< TwoPhaseSet::Service, ::crdt::SetListRequest, ::crdt::ResourceObject>(
          std::mem_fn(&TwoPhaseSet::Service::List), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      TwoPhaseSet_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TwoPhaseSet::Service, ::crdt::SetInsertRequest, ::crdt::SetInsertResponse>(
          std::mem_fn(&TwoPhaseSet::Service::Insert), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      TwoPhaseSet_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TwoPhaseSet::Service, ::crdt::SetRemoveRequest, ::crdt::SetRemoveResponse>(
          std::mem_fn(&TwoPhaseSet::Service::Remove), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      TwoPhaseSet_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TwoPhaseSet::Service, ::crdt::SetLengthRequest, ::crdt::SetLengthResponse>(
          std::mem_fn(&TwoPhaseSet::Service::Length), this)));
  service_->AddMethod(new ::grpc::RpcServiceMethod(
      TwoPhaseSet_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< TwoPhaseSet::Service, ::crdt::SetContainsRequest, ::crdt::SetContainsResponse>(
          std::mem_fn(&TwoPhaseSet::Service::Contains), this)));
  return service_;
}


}  // namespace crdt

