// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: crdt.proto

#ifndef PROTOBUF_crdt_2eproto__INCLUDED
#define PROTOBUF_crdt_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace crdt {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_crdt_2eproto();
void protobuf_AssignDesc_crdt_2eproto();
void protobuf_ShutdownFile_crdt_2eproto();

class AttachRequest;
class AttachResponse;
class BooleanResponse;
class CloneRequest;
class CloneResponse;
class CommitRequest;
class CommitResponse;
class CreateRequest;
class CreateResponse;
class DetachRequest;
class DetachResponse;
class EmptyMessage;
class EqualsRequest;
class EqualsResponse;
class MergeRequest;
class MergeResponse;
class ResourceObject;
class SetContainsRequest;
class SetContainsResponse;
class SetInsertRequest;
class SetInsertResponse;
class SetLengthRequest;
class SetLengthResponse;
class SetListRequest;
class SetRemoveRequest;
class SetRemoveResponse;
class Status;
class SupportedCryptoMethodsResponse;
class SupportedStorageTypesResponse;
class SupportedTypesResponse;
class TypeMessage;

// ===================================================================

class EmptyMessage : public ::google::protobuf::Message {
 public:
  EmptyMessage();
  virtual ~EmptyMessage();

  EmptyMessage(const EmptyMessage& from);

  inline EmptyMessage& operator=(const EmptyMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EmptyMessage& default_instance();

  void Swap(EmptyMessage* other);

  // implements Message ----------------------------------------------

  inline EmptyMessage* New() const { return New(NULL); }

  EmptyMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EmptyMessage& from);
  void MergeFrom(const EmptyMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EmptyMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:crdt.EmptyMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static EmptyMessage* default_instance_;
};
// -------------------------------------------------------------------

class BooleanResponse : public ::google::protobuf::Message {
 public:
  BooleanResponse();
  virtual ~BooleanResponse();

  BooleanResponse(const BooleanResponse& from);

  inline BooleanResponse& operator=(const BooleanResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BooleanResponse& default_instance();

  void Swap(BooleanResponse* other);

  // implements Message ----------------------------------------------

  inline BooleanResponse* New() const { return New(NULL); }

  BooleanResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BooleanResponse& from);
  void MergeFrom(const BooleanResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BooleanResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool value = 1;
  void clear_value();
  static const int kValueFieldNumber = 1;
  bool value() const;
  void set_value(bool value);

  // @@protoc_insertion_point(class_scope:crdt.BooleanResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  bool value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static BooleanResponse* default_instance_;
};
// -------------------------------------------------------------------

class Status : public ::google::protobuf::Message {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  void Swap(Status* other);

  // implements Message ----------------------------------------------

  inline Status* New() const { return New(NULL); }

  Status* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool success = 1;
  void clear_success();
  static const int kSuccessFieldNumber = 1;
  bool success() const;
  void set_success(bool value);

  // optional string errorType = 2;
  void clear_errortype();
  static const int kErrorTypeFieldNumber = 2;
  const ::std::string& errortype() const;
  void set_errortype(const ::std::string& value);
  void set_errortype(const char* value);
  void set_errortype(const char* value, size_t size);
  ::std::string* mutable_errortype();
  ::std::string* release_errortype();
  void set_allocated_errortype(::std::string* errortype);

  // @@protoc_insertion_point(class_scope:crdt.Status)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr errortype_;
  bool success_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static Status* default_instance_;
};
// -------------------------------------------------------------------

class TypeMessage : public ::google::protobuf::Message {
 public:
  TypeMessage();
  virtual ~TypeMessage();

  TypeMessage(const TypeMessage& from);

  inline TypeMessage& operator=(const TypeMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TypeMessage& default_instance();

  void Swap(TypeMessage* other);

  // implements Message ----------------------------------------------

  inline TypeMessage* New() const { return New(NULL); }

  TypeMessage* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TypeMessage& from);
  void MergeFrom(const TypeMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TypeMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // @@protoc_insertion_point(class_scope:crdt.TypeMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static TypeMessage* default_instance_;
};
// -------------------------------------------------------------------

class ResourceObject : public ::google::protobuf::Message {
 public:
  ResourceObject();
  virtual ~ResourceObject();

  ResourceObject(const ResourceObject& from);

  inline ResourceObject& operator=(const ResourceObject& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResourceObject& default_instance();

  void Swap(ResourceObject* other);

  // implements Message ----------------------------------------------

  inline ResourceObject* New() const { return New(NULL); }

  ResourceObject* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResourceObject& from);
  void MergeFrom(const ResourceObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResourceObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string referenceId = 1;
  void clear_referenceid();
  static const int kReferenceIdFieldNumber = 1;
  const ::std::string& referenceid() const;
  void set_referenceid(const ::std::string& value);
  void set_referenceid(const char* value);
  void set_referenceid(const char* value, size_t size);
  ::std::string* mutable_referenceid();
  ::std::string* release_referenceid();
  void set_allocated_referenceid(::std::string* referenceid);

  // optional bytes object = 2;
  void clear_object();
  static const int kObjectFieldNumber = 2;
  const ::std::string& object() const;
  void set_object(const ::std::string& value);
  void set_object(const char* value);
  void set_object(const void* value, size_t size);
  ::std::string* mutable_object();
  ::std::string* release_object();
  void set_allocated_object(::std::string* object);

  // @@protoc_insertion_point(class_scope:crdt.ResourceObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr referenceid_;
  ::google::protobuf::internal::ArenaStringPtr object_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static ResourceObject* default_instance_;
};
// -------------------------------------------------------------------

class CreateRequest : public ::google::protobuf::Message {
 public:
  CreateRequest();
  virtual ~CreateRequest();

  CreateRequest(const CreateRequest& from);

  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRequest& default_instance();

  void Swap(CreateRequest* other);

  // implements Message ----------------------------------------------

  inline CreateRequest* New() const { return New(NULL); }

  CreateRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateRequest& from);
  void MergeFrom(const CreateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string resourceType = 1;
  void clear_resourcetype();
  static const int kResourceTypeFieldNumber = 1;
  const ::std::string& resourcetype() const;
  void set_resourcetype(const ::std::string& value);
  void set_resourcetype(const char* value);
  void set_resourcetype(const char* value, size_t size);
  ::std::string* mutable_resourcetype();
  ::std::string* release_resourcetype();
  void set_allocated_resourcetype(::std::string* resourcetype);

  // optional string storageId = 2;
  void clear_storageid();
  static const int kStorageIdFieldNumber = 2;
  const ::std::string& storageid() const;
  void set_storageid(const ::std::string& value);
  void set_storageid(const char* value);
  void set_storageid(const char* value, size_t size);
  ::std::string* mutable_storageid();
  ::std::string* release_storageid();
  void set_allocated_storageid(::std::string* storageid);

  // optional string cryptoId = 3;
  void clear_cryptoid();
  static const int kCryptoIdFieldNumber = 3;
  const ::std::string& cryptoid() const;
  void set_cryptoid(const ::std::string& value);
  void set_cryptoid(const char* value);
  void set_cryptoid(const char* value, size_t size);
  ::std::string* mutable_cryptoid();
  ::std::string* release_cryptoid();
  void set_allocated_cryptoid(::std::string* cryptoid);

  // @@protoc_insertion_point(class_scope:crdt.CreateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr resourcetype_;
  ::google::protobuf::internal::ArenaStringPtr storageid_;
  ::google::protobuf::internal::ArenaStringPtr cryptoid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static CreateRequest* default_instance_;
};
// -------------------------------------------------------------------

class CreateResponse : public ::google::protobuf::Message {
 public:
  CreateResponse();
  virtual ~CreateResponse();

  CreateResponse(const CreateResponse& from);

  inline CreateResponse& operator=(const CreateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateResponse& default_instance();

  void Swap(CreateResponse* other);

  // implements Message ----------------------------------------------

  inline CreateResponse* New() const { return New(NULL); }

  CreateResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateResponse& from);
  void MergeFrom(const CreateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .crdt.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::crdt::Status& status() const;
  ::crdt::Status* mutable_status();
  ::crdt::Status* release_status();
  void set_allocated_status(::crdt::Status* status);

  // optional string resourceId = 2;
  void clear_resourceid();
  static const int kResourceIdFieldNumber = 2;
  const ::std::string& resourceid() const;
  void set_resourceid(const ::std::string& value);
  void set_resourceid(const char* value);
  void set_resourceid(const char* value, size_t size);
  ::std::string* mutable_resourceid();
  ::std::string* release_resourceid();
  void set_allocated_resourceid(::std::string* resourceid);

  // optional string resourceKey = 3;
  void clear_resourcekey();
  static const int kResourceKeyFieldNumber = 3;
  const ::std::string& resourcekey() const;
  void set_resourcekey(const ::std::string& value);
  void set_resourcekey(const char* value);
  void set_resourcekey(const char* value, size_t size);
  ::std::string* mutable_resourcekey();
  ::std::string* release_resourcekey();
  void set_allocated_resourcekey(::std::string* resourcekey);

  // @@protoc_insertion_point(class_scope:crdt.CreateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::crdt::Status* status_;
  ::google::protobuf::internal::ArenaStringPtr resourceid_;
  ::google::protobuf::internal::ArenaStringPtr resourcekey_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static CreateResponse* default_instance_;
};
// -------------------------------------------------------------------

class AttachRequest : public ::google::protobuf::Message {
 public:
  AttachRequest();
  virtual ~AttachRequest();

  AttachRequest(const AttachRequest& from);

  inline AttachRequest& operator=(const AttachRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttachRequest& default_instance();

  void Swap(AttachRequest* other);

  // implements Message ----------------------------------------------

  inline AttachRequest* New() const { return New(NULL); }

  AttachRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttachRequest& from);
  void MergeFrom(const AttachRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AttachRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string resourceId = 1;
  void clear_resourceid();
  static const int kResourceIdFieldNumber = 1;
  const ::std::string& resourceid() const;
  void set_resourceid(const ::std::string& value);
  void set_resourceid(const char* value);
  void set_resourceid(const char* value, size_t size);
  ::std::string* mutable_resourceid();
  ::std::string* release_resourceid();
  void set_allocated_resourceid(::std::string* resourceid);

  // optional string resourceKey = 2;
  void clear_resourcekey();
  static const int kResourceKeyFieldNumber = 2;
  const ::std::string& resourcekey() const;
  void set_resourcekey(const ::std::string& value);
  void set_resourcekey(const char* value);
  void set_resourcekey(const char* value, size_t size);
  ::std::string* mutable_resourcekey();
  ::std::string* release_resourcekey();
  void set_allocated_resourcekey(::std::string* resourcekey);

  // @@protoc_insertion_point(class_scope:crdt.AttachRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr resourceid_;
  ::google::protobuf::internal::ArenaStringPtr resourcekey_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static AttachRequest* default_instance_;
};
// -------------------------------------------------------------------

class AttachResponse : public ::google::protobuf::Message {
 public:
  AttachResponse();
  virtual ~AttachResponse();

  AttachResponse(const AttachResponse& from);

  inline AttachResponse& operator=(const AttachResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttachResponse& default_instance();

  void Swap(AttachResponse* other);

  // implements Message ----------------------------------------------

  inline AttachResponse* New() const { return New(NULL); }

  AttachResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttachResponse& from);
  void MergeFrom(const AttachResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AttachResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .crdt.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::crdt::Status& status() const;
  ::crdt::Status* mutable_status();
  ::crdt::Status* release_status();
  void set_allocated_status(::crdt::Status* status);

  // optional string referenceId = 2;
  void clear_referenceid();
  static const int kReferenceIdFieldNumber = 2;
  const ::std::string& referenceid() const;
  void set_referenceid(const ::std::string& value);
  void set_referenceid(const char* value);
  void set_referenceid(const char* value, size_t size);
  ::std::string* mutable_referenceid();
  ::std::string* release_referenceid();
  void set_allocated_referenceid(::std::string* referenceid);

  // @@protoc_insertion_point(class_scope:crdt.AttachResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::crdt::Status* status_;
  ::google::protobuf::internal::ArenaStringPtr referenceid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static AttachResponse* default_instance_;
};
// -------------------------------------------------------------------

class DetachRequest : public ::google::protobuf::Message {
 public:
  DetachRequest();
  virtual ~DetachRequest();

  DetachRequest(const DetachRequest& from);

  inline DetachRequest& operator=(const DetachRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetachRequest& default_instance();

  void Swap(DetachRequest* other);

  // implements Message ----------------------------------------------

  inline DetachRequest* New() const { return New(NULL); }

  DetachRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetachRequest& from);
  void MergeFrom(const DetachRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DetachRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string referenceId = 1;
  void clear_referenceid();
  static const int kReferenceIdFieldNumber = 1;
  const ::std::string& referenceid() const;
  void set_referenceid(const ::std::string& value);
  void set_referenceid(const char* value);
  void set_referenceid(const char* value, size_t size);
  ::std::string* mutable_referenceid();
  ::std::string* release_referenceid();
  void set_allocated_referenceid(::std::string* referenceid);

  // @@protoc_insertion_point(class_scope:crdt.DetachRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr referenceid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static DetachRequest* default_instance_;
};
// -------------------------------------------------------------------

class DetachResponse : public ::google::protobuf::Message {
 public:
  DetachResponse();
  virtual ~DetachResponse();

  DetachResponse(const DetachResponse& from);

  inline DetachResponse& operator=(const DetachResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetachResponse& default_instance();

  void Swap(DetachResponse* other);

  // implements Message ----------------------------------------------

  inline DetachResponse* New() const { return New(NULL); }

  DetachResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetachResponse& from);
  void MergeFrom(const DetachResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DetachResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .crdt.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::crdt::Status& status() const;
  ::crdt::Status* mutable_status();
  ::crdt::Status* release_status();
  void set_allocated_status(::crdt::Status* status);

  // @@protoc_insertion_point(class_scope:crdt.DetachResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::crdt::Status* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static DetachResponse* default_instance_;
};
// -------------------------------------------------------------------

class CommitRequest : public ::google::protobuf::Message {
 public:
  CommitRequest();
  virtual ~CommitRequest();

  CommitRequest(const CommitRequest& from);

  inline CommitRequest& operator=(const CommitRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitRequest& default_instance();

  void Swap(CommitRequest* other);

  // implements Message ----------------------------------------------

  inline CommitRequest* New() const { return New(NULL); }

  CommitRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommitRequest& from);
  void MergeFrom(const CommitRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommitRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string referenceId = 1;
  void clear_referenceid();
  static const int kReferenceIdFieldNumber = 1;
  const ::std::string& referenceid() const;
  void set_referenceid(const ::std::string& value);
  void set_referenceid(const char* value);
  void set_referenceid(const char* value, size_t size);
  ::std::string* mutable_referenceid();
  ::std::string* release_referenceid();
  void set_allocated_referenceid(::std::string* referenceid);

  // @@protoc_insertion_point(class_scope:crdt.CommitRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr referenceid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static CommitRequest* default_instance_;
};
// -------------------------------------------------------------------

class CommitResponse : public ::google::protobuf::Message {
 public:
  CommitResponse();
  virtual ~CommitResponse();

  CommitResponse(const CommitResponse& from);

  inline CommitResponse& operator=(const CommitResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CommitResponse& default_instance();

  void Swap(CommitResponse* other);

  // implements Message ----------------------------------------------

  inline CommitResponse* New() const { return New(NULL); }

  CommitResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommitResponse& from);
  void MergeFrom(const CommitResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CommitResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .crdt.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::crdt::Status& status() const;
  ::crdt::Status* mutable_status();
  ::crdt::Status* release_status();
  void set_allocated_status(::crdt::Status* status);

  // @@protoc_insertion_point(class_scope:crdt.CommitResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::crdt::Status* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static CommitResponse* default_instance_;
};
// -------------------------------------------------------------------

class EqualsRequest : public ::google::protobuf::Message {
 public:
  EqualsRequest();
  virtual ~EqualsRequest();

  EqualsRequest(const EqualsRequest& from);

  inline EqualsRequest& operator=(const EqualsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EqualsRequest& default_instance();

  void Swap(EqualsRequest* other);

  // implements Message ----------------------------------------------

  inline EqualsRequest* New() const { return New(NULL); }

  EqualsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EqualsRequest& from);
  void MergeFrom(const EqualsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EqualsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string referenceId = 1;
  void clear_referenceid();
  static const int kReferenceIdFieldNumber = 1;
  const ::std::string& referenceid() const;
  void set_referenceid(const ::std::string& value);
  void set_referenceid(const char* value);
  void set_referenceid(const char* value, size_t size);
  ::std::string* mutable_referenceid();
  ::std::string* release_referenceid();
  void set_allocated_referenceid(::std::string* referenceid);

  // optional string otherReferenceId = 2;
  void clear_otherreferenceid();
  static const int kOtherReferenceIdFieldNumber = 2;
  const ::std::string& otherreferenceid() const;
  void set_otherreferenceid(const ::std::string& value);
  void set_otherreferenceid(const char* value);
  void set_otherreferenceid(const char* value, size_t size);
  ::std::string* mutable_otherreferenceid();
  ::std::string* release_otherreferenceid();
  void set_allocated_otherreferenceid(::std::string* otherreferenceid);

  // @@protoc_insertion_point(class_scope:crdt.EqualsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr referenceid_;
  ::google::protobuf::internal::ArenaStringPtr otherreferenceid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static EqualsRequest* default_instance_;
};
// -------------------------------------------------------------------

class EqualsResponse : public ::google::protobuf::Message {
 public:
  EqualsResponse();
  virtual ~EqualsResponse();

  EqualsResponse(const EqualsResponse& from);

  inline EqualsResponse& operator=(const EqualsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EqualsResponse& default_instance();

  void Swap(EqualsResponse* other);

  // implements Message ----------------------------------------------

  inline EqualsResponse* New() const { return New(NULL); }

  EqualsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EqualsResponse& from);
  void MergeFrom(const EqualsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EqualsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .crdt.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::crdt::Status& status() const;
  ::crdt::Status* mutable_status();
  ::crdt::Status* release_status();
  void set_allocated_status(::crdt::Status* status);

  // optional bool result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:crdt.EqualsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::crdt::Status* status_;
  bool result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static EqualsResponse* default_instance_;
};
// -------------------------------------------------------------------

class MergeRequest : public ::google::protobuf::Message {
 public:
  MergeRequest();
  virtual ~MergeRequest();

  MergeRequest(const MergeRequest& from);

  inline MergeRequest& operator=(const MergeRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MergeRequest& default_instance();

  void Swap(MergeRequest* other);

  // implements Message ----------------------------------------------

  inline MergeRequest* New() const { return New(NULL); }

  MergeRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MergeRequest& from);
  void MergeFrom(const MergeRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MergeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string referenceId = 1;
  void clear_referenceid();
  static const int kReferenceIdFieldNumber = 1;
  const ::std::string& referenceid() const;
  void set_referenceid(const ::std::string& value);
  void set_referenceid(const char* value);
  void set_referenceid(const char* value, size_t size);
  ::std::string* mutable_referenceid();
  ::std::string* release_referenceid();
  void set_allocated_referenceid(::std::string* referenceid);

  // optional string otherReferenceId = 2;
  void clear_otherreferenceid();
  static const int kOtherReferenceIdFieldNumber = 2;
  const ::std::string& otherreferenceid() const;
  void set_otherreferenceid(const ::std::string& value);
  void set_otherreferenceid(const char* value);
  void set_otherreferenceid(const char* value, size_t size);
  ::std::string* mutable_otherreferenceid();
  ::std::string* release_otherreferenceid();
  void set_allocated_otherreferenceid(::std::string* otherreferenceid);

  // @@protoc_insertion_point(class_scope:crdt.MergeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr referenceid_;
  ::google::protobuf::internal::ArenaStringPtr otherreferenceid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static MergeRequest* default_instance_;
};
// -------------------------------------------------------------------

class MergeResponse : public ::google::protobuf::Message {
 public:
  MergeResponse();
  virtual ~MergeResponse();

  MergeResponse(const MergeResponse& from);

  inline MergeResponse& operator=(const MergeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MergeResponse& default_instance();

  void Swap(MergeResponse* other);

  // implements Message ----------------------------------------------

  inline MergeResponse* New() const { return New(NULL); }

  MergeResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MergeResponse& from);
  void MergeFrom(const MergeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MergeResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .crdt.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::crdt::Status& status() const;
  ::crdt::Status* mutable_status();
  ::crdt::Status* release_status();
  void set_allocated_status(::crdt::Status* status);

  // @@protoc_insertion_point(class_scope:crdt.MergeResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::crdt::Status* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static MergeResponse* default_instance_;
};
// -------------------------------------------------------------------

class CloneRequest : public ::google::protobuf::Message {
 public:
  CloneRequest();
  virtual ~CloneRequest();

  CloneRequest(const CloneRequest& from);

  inline CloneRequest& operator=(const CloneRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloneRequest& default_instance();

  void Swap(CloneRequest* other);

  // implements Message ----------------------------------------------

  inline CloneRequest* New() const { return New(NULL); }

  CloneRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloneRequest& from);
  void MergeFrom(const CloneRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CloneRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string referenceId = 1;
  void clear_referenceid();
  static const int kReferenceIdFieldNumber = 1;
  const ::std::string& referenceid() const;
  void set_referenceid(const ::std::string& value);
  void set_referenceid(const char* value);
  void set_referenceid(const char* value, size_t size);
  ::std::string* mutable_referenceid();
  ::std::string* release_referenceid();
  void set_allocated_referenceid(::std::string* referenceid);

  // @@protoc_insertion_point(class_scope:crdt.CloneRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr referenceid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static CloneRequest* default_instance_;
};
// -------------------------------------------------------------------

class CloneResponse : public ::google::protobuf::Message {
 public:
  CloneResponse();
  virtual ~CloneResponse();

  CloneResponse(const CloneResponse& from);

  inline CloneResponse& operator=(const CloneResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CloneResponse& default_instance();

  void Swap(CloneResponse* other);

  // implements Message ----------------------------------------------

  inline CloneResponse* New() const { return New(NULL); }

  CloneResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CloneResponse& from);
  void MergeFrom(const CloneResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CloneResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .crdt.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::crdt::Status& status() const;
  ::crdt::Status* mutable_status();
  ::crdt::Status* release_status();
  void set_allocated_status(::crdt::Status* status);

  // optional string resourceId = 2;
  void clear_resourceid();
  static const int kResourceIdFieldNumber = 2;
  const ::std::string& resourceid() const;
  void set_resourceid(const ::std::string& value);
  void set_resourceid(const char* value);
  void set_resourceid(const char* value, size_t size);
  ::std::string* mutable_resourceid();
  ::std::string* release_resourceid();
  void set_allocated_resourceid(::std::string* resourceid);

  // optional string resourceKey = 3;
  void clear_resourcekey();
  static const int kResourceKeyFieldNumber = 3;
  const ::std::string& resourcekey() const;
  void set_resourcekey(const ::std::string& value);
  void set_resourcekey(const char* value);
  void set_resourcekey(const char* value, size_t size);
  ::std::string* mutable_resourcekey();
  ::std::string* release_resourcekey();
  void set_allocated_resourcekey(::std::string* resourcekey);

  // @@protoc_insertion_point(class_scope:crdt.CloneResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::crdt::Status* status_;
  ::google::protobuf::internal::ArenaStringPtr resourceid_;
  ::google::protobuf::internal::ArenaStringPtr resourcekey_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static CloneResponse* default_instance_;
};
// -------------------------------------------------------------------

class SupportedTypesResponse : public ::google::protobuf::Message {
 public:
  SupportedTypesResponse();
  virtual ~SupportedTypesResponse();

  SupportedTypesResponse(const SupportedTypesResponse& from);

  inline SupportedTypesResponse& operator=(const SupportedTypesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SupportedTypesResponse& default_instance();

  void Swap(SupportedTypesResponse* other);

  // implements Message ----------------------------------------------

  inline SupportedTypesResponse* New() const { return New(NULL); }

  SupportedTypesResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SupportedTypesResponse& from);
  void MergeFrom(const SupportedTypesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SupportedTypesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .crdt.TypeMessage types = 1;
  int types_size() const;
  void clear_types();
  static const int kTypesFieldNumber = 1;
  const ::crdt::TypeMessage& types(int index) const;
  ::crdt::TypeMessage* mutable_types(int index);
  ::crdt::TypeMessage* add_types();
  ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >*
      mutable_types();
  const ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >&
      types() const;

  // @@protoc_insertion_point(class_scope:crdt.SupportedTypesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage > types_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static SupportedTypesResponse* default_instance_;
};
// -------------------------------------------------------------------

class SupportedStorageTypesResponse : public ::google::protobuf::Message {
 public:
  SupportedStorageTypesResponse();
  virtual ~SupportedStorageTypesResponse();

  SupportedStorageTypesResponse(const SupportedStorageTypesResponse& from);

  inline SupportedStorageTypesResponse& operator=(const SupportedStorageTypesResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SupportedStorageTypesResponse& default_instance();

  void Swap(SupportedStorageTypesResponse* other);

  // implements Message ----------------------------------------------

  inline SupportedStorageTypesResponse* New() const { return New(NULL); }

  SupportedStorageTypesResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SupportedStorageTypesResponse& from);
  void MergeFrom(const SupportedStorageTypesResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SupportedStorageTypesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .crdt.TypeMessage types = 1;
  int types_size() const;
  void clear_types();
  static const int kTypesFieldNumber = 1;
  const ::crdt::TypeMessage& types(int index) const;
  ::crdt::TypeMessage* mutable_types(int index);
  ::crdt::TypeMessage* add_types();
  ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >*
      mutable_types();
  const ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >&
      types() const;

  // @@protoc_insertion_point(class_scope:crdt.SupportedStorageTypesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage > types_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static SupportedStorageTypesResponse* default_instance_;
};
// -------------------------------------------------------------------

class SupportedCryptoMethodsResponse : public ::google::protobuf::Message {
 public:
  SupportedCryptoMethodsResponse();
  virtual ~SupportedCryptoMethodsResponse();

  SupportedCryptoMethodsResponse(const SupportedCryptoMethodsResponse& from);

  inline SupportedCryptoMethodsResponse& operator=(const SupportedCryptoMethodsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SupportedCryptoMethodsResponse& default_instance();

  void Swap(SupportedCryptoMethodsResponse* other);

  // implements Message ----------------------------------------------

  inline SupportedCryptoMethodsResponse* New() const { return New(NULL); }

  SupportedCryptoMethodsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SupportedCryptoMethodsResponse& from);
  void MergeFrom(const SupportedCryptoMethodsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SupportedCryptoMethodsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .crdt.TypeMessage types = 1;
  int types_size() const;
  void clear_types();
  static const int kTypesFieldNumber = 1;
  const ::crdt::TypeMessage& types(int index) const;
  ::crdt::TypeMessage* mutable_types(int index);
  ::crdt::TypeMessage* add_types();
  ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >*
      mutable_types();
  const ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >&
      types() const;

  // @@protoc_insertion_point(class_scope:crdt.SupportedCryptoMethodsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage > types_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static SupportedCryptoMethodsResponse* default_instance_;
};
// -------------------------------------------------------------------

class SetListRequest : public ::google::protobuf::Message {
 public:
  SetListRequest();
  virtual ~SetListRequest();

  SetListRequest(const SetListRequest& from);

  inline SetListRequest& operator=(const SetListRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetListRequest& default_instance();

  void Swap(SetListRequest* other);

  // implements Message ----------------------------------------------

  inline SetListRequest* New() const { return New(NULL); }

  SetListRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetListRequest& from);
  void MergeFrom(const SetListRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetListRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string referenceId = 1;
  void clear_referenceid();
  static const int kReferenceIdFieldNumber = 1;
  const ::std::string& referenceid() const;
  void set_referenceid(const ::std::string& value);
  void set_referenceid(const char* value);
  void set_referenceid(const char* value, size_t size);
  ::std::string* mutable_referenceid();
  ::std::string* release_referenceid();
  void set_allocated_referenceid(::std::string* referenceid);

  // @@protoc_insertion_point(class_scope:crdt.SetListRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr referenceid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static SetListRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetInsertRequest : public ::google::protobuf::Message {
 public:
  SetInsertRequest();
  virtual ~SetInsertRequest();

  SetInsertRequest(const SetInsertRequest& from);

  inline SetInsertRequest& operator=(const SetInsertRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetInsertRequest& default_instance();

  void Swap(SetInsertRequest* other);

  // implements Message ----------------------------------------------

  inline SetInsertRequest* New() const { return New(NULL); }

  SetInsertRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetInsertRequest& from);
  void MergeFrom(const SetInsertRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetInsertRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .crdt.ResourceObject object = 1;
  bool has_object() const;
  void clear_object();
  static const int kObjectFieldNumber = 1;
  const ::crdt::ResourceObject& object() const;
  ::crdt::ResourceObject* mutable_object();
  ::crdt::ResourceObject* release_object();
  void set_allocated_object(::crdt::ResourceObject* object);

  // @@protoc_insertion_point(class_scope:crdt.SetInsertRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::crdt::ResourceObject* object_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static SetInsertRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetInsertResponse : public ::google::protobuf::Message {
 public:
  SetInsertResponse();
  virtual ~SetInsertResponse();

  SetInsertResponse(const SetInsertResponse& from);

  inline SetInsertResponse& operator=(const SetInsertResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetInsertResponse& default_instance();

  void Swap(SetInsertResponse* other);

  // implements Message ----------------------------------------------

  inline SetInsertResponse* New() const { return New(NULL); }

  SetInsertResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetInsertResponse& from);
  void MergeFrom(const SetInsertResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetInsertResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .crdt.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::crdt::Status& status() const;
  ::crdt::Status* mutable_status();
  ::crdt::Status* release_status();
  void set_allocated_status(::crdt::Status* status);

  // @@protoc_insertion_point(class_scope:crdt.SetInsertResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::crdt::Status* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static SetInsertResponse* default_instance_;
};
// -------------------------------------------------------------------

class SetRemoveRequest : public ::google::protobuf::Message {
 public:
  SetRemoveRequest();
  virtual ~SetRemoveRequest();

  SetRemoveRequest(const SetRemoveRequest& from);

  inline SetRemoveRequest& operator=(const SetRemoveRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetRemoveRequest& default_instance();

  void Swap(SetRemoveRequest* other);

  // implements Message ----------------------------------------------

  inline SetRemoveRequest* New() const { return New(NULL); }

  SetRemoveRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetRemoveRequest& from);
  void MergeFrom(const SetRemoveRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetRemoveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .crdt.ResourceObject object = 1;
  bool has_object() const;
  void clear_object();
  static const int kObjectFieldNumber = 1;
  const ::crdt::ResourceObject& object() const;
  ::crdt::ResourceObject* mutable_object();
  ::crdt::ResourceObject* release_object();
  void set_allocated_object(::crdt::ResourceObject* object);

  // @@protoc_insertion_point(class_scope:crdt.SetRemoveRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::crdt::ResourceObject* object_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static SetRemoveRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetRemoveResponse : public ::google::protobuf::Message {
 public:
  SetRemoveResponse();
  virtual ~SetRemoveResponse();

  SetRemoveResponse(const SetRemoveResponse& from);

  inline SetRemoveResponse& operator=(const SetRemoveResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetRemoveResponse& default_instance();

  void Swap(SetRemoveResponse* other);

  // implements Message ----------------------------------------------

  inline SetRemoveResponse* New() const { return New(NULL); }

  SetRemoveResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetRemoveResponse& from);
  void MergeFrom(const SetRemoveResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetRemoveResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .crdt.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::crdt::Status& status() const;
  ::crdt::Status* mutable_status();
  ::crdt::Status* release_status();
  void set_allocated_status(::crdt::Status* status);

  // @@protoc_insertion_point(class_scope:crdt.SetRemoveResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::crdt::Status* status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static SetRemoveResponse* default_instance_;
};
// -------------------------------------------------------------------

class SetLengthRequest : public ::google::protobuf::Message {
 public:
  SetLengthRequest();
  virtual ~SetLengthRequest();

  SetLengthRequest(const SetLengthRequest& from);

  inline SetLengthRequest& operator=(const SetLengthRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetLengthRequest& default_instance();

  void Swap(SetLengthRequest* other);

  // implements Message ----------------------------------------------

  inline SetLengthRequest* New() const { return New(NULL); }

  SetLengthRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetLengthRequest& from);
  void MergeFrom(const SetLengthRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetLengthRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string referenceId = 1;
  void clear_referenceid();
  static const int kReferenceIdFieldNumber = 1;
  const ::std::string& referenceid() const;
  void set_referenceid(const ::std::string& value);
  void set_referenceid(const char* value);
  void set_referenceid(const char* value, size_t size);
  ::std::string* mutable_referenceid();
  ::std::string* release_referenceid();
  void set_allocated_referenceid(::std::string* referenceid);

  // @@protoc_insertion_point(class_scope:crdt.SetLengthRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr referenceid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static SetLengthRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetLengthResponse : public ::google::protobuf::Message {
 public:
  SetLengthResponse();
  virtual ~SetLengthResponse();

  SetLengthResponse(const SetLengthResponse& from);

  inline SetLengthResponse& operator=(const SetLengthResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetLengthResponse& default_instance();

  void Swap(SetLengthResponse* other);

  // implements Message ----------------------------------------------

  inline SetLengthResponse* New() const { return New(NULL); }

  SetLengthResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetLengthResponse& from);
  void MergeFrom(const SetLengthResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetLengthResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .crdt.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::crdt::Status& status() const;
  ::crdt::Status* mutable_status();
  ::crdt::Status* release_status();
  void set_allocated_status(::crdt::Status* status);

  // optional uint64 length = 2;
  void clear_length();
  static const int kLengthFieldNumber = 2;
  ::google::protobuf::uint64 length() const;
  void set_length(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:crdt.SetLengthResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::crdt::Status* status_;
  ::google::protobuf::uint64 length_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static SetLengthResponse* default_instance_;
};
// -------------------------------------------------------------------

class SetContainsRequest : public ::google::protobuf::Message {
 public:
  SetContainsRequest();
  virtual ~SetContainsRequest();

  SetContainsRequest(const SetContainsRequest& from);

  inline SetContainsRequest& operator=(const SetContainsRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetContainsRequest& default_instance();

  void Swap(SetContainsRequest* other);

  // implements Message ----------------------------------------------

  inline SetContainsRequest* New() const { return New(NULL); }

  SetContainsRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetContainsRequest& from);
  void MergeFrom(const SetContainsRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetContainsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .crdt.ResourceObject object = 1;
  bool has_object() const;
  void clear_object();
  static const int kObjectFieldNumber = 1;
  const ::crdt::ResourceObject& object() const;
  ::crdt::ResourceObject* mutable_object();
  ::crdt::ResourceObject* release_object();
  void set_allocated_object(::crdt::ResourceObject* object);

  // @@protoc_insertion_point(class_scope:crdt.SetContainsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::crdt::ResourceObject* object_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static SetContainsRequest* default_instance_;
};
// -------------------------------------------------------------------

class SetContainsResponse : public ::google::protobuf::Message {
 public:
  SetContainsResponse();
  virtual ~SetContainsResponse();

  SetContainsResponse(const SetContainsResponse& from);

  inline SetContainsResponse& operator=(const SetContainsResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetContainsResponse& default_instance();

  void Swap(SetContainsResponse* other);

  // implements Message ----------------------------------------------

  inline SetContainsResponse* New() const { return New(NULL); }

  SetContainsResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SetContainsResponse& from);
  void MergeFrom(const SetContainsResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetContainsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .crdt.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::crdt::Status& status() const;
  ::crdt::Status* mutable_status();
  ::crdt::Status* release_status();
  void set_allocated_status(::crdt::Status* status);

  // optional bool result = 2;
  void clear_result();
  static const int kResultFieldNumber = 2;
  bool result() const;
  void set_result(bool value);

  // @@protoc_insertion_point(class_scope:crdt.SetContainsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::crdt::Status* status_;
  bool result_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_crdt_2eproto();
  friend void protobuf_AssignDesc_crdt_2eproto();
  friend void protobuf_ShutdownFile_crdt_2eproto();

  void InitAsDefaultInstance();
  static SetContainsResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// EmptyMessage

// -------------------------------------------------------------------

// BooleanResponse

// optional bool value = 1;
inline void BooleanResponse::clear_value() {
  value_ = false;
}
inline bool BooleanResponse::value() const {
  // @@protoc_insertion_point(field_get:crdt.BooleanResponse.value)
  return value_;
}
inline void BooleanResponse::set_value(bool value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:crdt.BooleanResponse.value)
}

// -------------------------------------------------------------------

// Status

// optional bool success = 1;
inline void Status::clear_success() {
  success_ = false;
}
inline bool Status::success() const {
  // @@protoc_insertion_point(field_get:crdt.Status.success)
  return success_;
}
inline void Status::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:crdt.Status.success)
}

// optional string errorType = 2;
inline void Status::clear_errortype() {
  errortype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Status::errortype() const {
  // @@protoc_insertion_point(field_get:crdt.Status.errorType)
  return errortype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_errortype(const ::std::string& value) {
  
  errortype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.Status.errorType)
}
inline void Status::set_errortype(const char* value) {
  
  errortype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.Status.errorType)
}
inline void Status::set_errortype(const char* value, size_t size) {
  
  errortype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.Status.errorType)
}
inline ::std::string* Status::mutable_errortype() {
  
  // @@protoc_insertion_point(field_mutable:crdt.Status.errorType)
  return errortype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_errortype() {
  
  return errortype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_errortype(::std::string* errortype) {
  if (errortype != NULL) {
    
  } else {
    
  }
  errortype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), errortype);
  // @@protoc_insertion_point(field_set_allocated:crdt.Status.errorType)
}

// -------------------------------------------------------------------

// TypeMessage

// optional string type = 1;
inline void TypeMessage::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TypeMessage::type() const {
  // @@protoc_insertion_point(field_get:crdt.TypeMessage.type)
  return type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TypeMessage::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.TypeMessage.type)
}
inline void TypeMessage::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.TypeMessage.type)
}
inline void TypeMessage::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.TypeMessage.type)
}
inline ::std::string* TypeMessage::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:crdt.TypeMessage.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TypeMessage::release_type() {
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TypeMessage::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:crdt.TypeMessage.type)
}

// -------------------------------------------------------------------

// ResourceObject

// optional string referenceId = 1;
inline void ResourceObject::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourceObject::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.ResourceObject.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceObject::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.ResourceObject.referenceId)
}
inline void ResourceObject::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.ResourceObject.referenceId)
}
inline void ResourceObject::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.ResourceObject.referenceId)
}
inline ::std::string* ResourceObject::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.ResourceObject.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceObject::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceObject::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.ResourceObject.referenceId)
}

// optional bytes object = 2;
inline void ResourceObject::clear_object() {
  object_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourceObject::object() const {
  // @@protoc_insertion_point(field_get:crdt.ResourceObject.object)
  return object_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceObject::set_object(const ::std::string& value) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.ResourceObject.object)
}
inline void ResourceObject::set_object(const char* value) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.ResourceObject.object)
}
inline void ResourceObject::set_object(const void* value, size_t size) {
  
  object_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.ResourceObject.object)
}
inline ::std::string* ResourceObject::mutable_object() {
  
  // @@protoc_insertion_point(field_mutable:crdt.ResourceObject.object)
  return object_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceObject::release_object() {
  
  return object_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceObject::set_allocated_object(::std::string* object) {
  if (object != NULL) {
    
  } else {
    
  }
  object_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), object);
  // @@protoc_insertion_point(field_set_allocated:crdt.ResourceObject.object)
}

// -------------------------------------------------------------------

// CreateRequest

// optional string resourceType = 1;
inline void CreateRequest::clear_resourcetype() {
  resourcetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateRequest::resourcetype() const {
  // @@protoc_insertion_point(field_get:crdt.CreateRequest.resourceType)
  return resourcetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRequest::set_resourcetype(const ::std::string& value) {
  
  resourcetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CreateRequest.resourceType)
}
inline void CreateRequest::set_resourcetype(const char* value) {
  
  resourcetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CreateRequest.resourceType)
}
inline void CreateRequest::set_resourcetype(const char* value, size_t size) {
  
  resourcetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CreateRequest.resourceType)
}
inline ::std::string* CreateRequest::mutable_resourcetype() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CreateRequest.resourceType)
  return resourcetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateRequest::release_resourcetype() {
  
  return resourcetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRequest::set_allocated_resourcetype(::std::string* resourcetype) {
  if (resourcetype != NULL) {
    
  } else {
    
  }
  resourcetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourcetype);
  // @@protoc_insertion_point(field_set_allocated:crdt.CreateRequest.resourceType)
}

// optional string storageId = 2;
inline void CreateRequest::clear_storageid() {
  storageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateRequest::storageid() const {
  // @@protoc_insertion_point(field_get:crdt.CreateRequest.storageId)
  return storageid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRequest::set_storageid(const ::std::string& value) {
  
  storageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CreateRequest.storageId)
}
inline void CreateRequest::set_storageid(const char* value) {
  
  storageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CreateRequest.storageId)
}
inline void CreateRequest::set_storageid(const char* value, size_t size) {
  
  storageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CreateRequest.storageId)
}
inline ::std::string* CreateRequest::mutable_storageid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CreateRequest.storageId)
  return storageid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateRequest::release_storageid() {
  
  return storageid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRequest::set_allocated_storageid(::std::string* storageid) {
  if (storageid != NULL) {
    
  } else {
    
  }
  storageid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), storageid);
  // @@protoc_insertion_point(field_set_allocated:crdt.CreateRequest.storageId)
}

// optional string cryptoId = 3;
inline void CreateRequest::clear_cryptoid() {
  cryptoid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateRequest::cryptoid() const {
  // @@protoc_insertion_point(field_get:crdt.CreateRequest.cryptoId)
  return cryptoid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRequest::set_cryptoid(const ::std::string& value) {
  
  cryptoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CreateRequest.cryptoId)
}
inline void CreateRequest::set_cryptoid(const char* value) {
  
  cryptoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CreateRequest.cryptoId)
}
inline void CreateRequest::set_cryptoid(const char* value, size_t size) {
  
  cryptoid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CreateRequest.cryptoId)
}
inline ::std::string* CreateRequest::mutable_cryptoid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CreateRequest.cryptoId)
  return cryptoid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateRequest::release_cryptoid() {
  
  return cryptoid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRequest::set_allocated_cryptoid(::std::string* cryptoid) {
  if (cryptoid != NULL) {
    
  } else {
    
  }
  cryptoid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cryptoid);
  // @@protoc_insertion_point(field_set_allocated:crdt.CreateRequest.cryptoId)
}

// -------------------------------------------------------------------

// CreateResponse

// optional .crdt.Status status = 1;
inline bool CreateResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void CreateResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::crdt::Status& CreateResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.CreateResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::crdt::Status* CreateResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.CreateResponse.status)
  return status_;
}
inline ::crdt::Status* CreateResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void CreateResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.CreateResponse.status)
}

// optional string resourceId = 2;
inline void CreateResponse::clear_resourceid() {
  resourceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateResponse::resourceid() const {
  // @@protoc_insertion_point(field_get:crdt.CreateResponse.resourceId)
  return resourceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateResponse::set_resourceid(const ::std::string& value) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CreateResponse.resourceId)
}
inline void CreateResponse::set_resourceid(const char* value) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CreateResponse.resourceId)
}
inline void CreateResponse::set_resourceid(const char* value, size_t size) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CreateResponse.resourceId)
}
inline ::std::string* CreateResponse::mutable_resourceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CreateResponse.resourceId)
  return resourceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateResponse::release_resourceid() {
  
  return resourceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateResponse::set_allocated_resourceid(::std::string* resourceid) {
  if (resourceid != NULL) {
    
  } else {
    
  }
  resourceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.CreateResponse.resourceId)
}

// optional string resourceKey = 3;
inline void CreateResponse::clear_resourcekey() {
  resourcekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateResponse::resourcekey() const {
  // @@protoc_insertion_point(field_get:crdt.CreateResponse.resourceKey)
  return resourcekey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateResponse::set_resourcekey(const ::std::string& value) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CreateResponse.resourceKey)
}
inline void CreateResponse::set_resourcekey(const char* value) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CreateResponse.resourceKey)
}
inline void CreateResponse::set_resourcekey(const char* value, size_t size) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CreateResponse.resourceKey)
}
inline ::std::string* CreateResponse::mutable_resourcekey() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CreateResponse.resourceKey)
  return resourcekey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateResponse::release_resourcekey() {
  
  return resourcekey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateResponse::set_allocated_resourcekey(::std::string* resourcekey) {
  if (resourcekey != NULL) {
    
  } else {
    
  }
  resourcekey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourcekey);
  // @@protoc_insertion_point(field_set_allocated:crdt.CreateResponse.resourceKey)
}

// -------------------------------------------------------------------

// AttachRequest

// optional string resourceId = 1;
inline void AttachRequest::clear_resourceid() {
  resourceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachRequest::resourceid() const {
  // @@protoc_insertion_point(field_get:crdt.AttachRequest.resourceId)
  return resourceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachRequest::set_resourceid(const ::std::string& value) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.AttachRequest.resourceId)
}
inline void AttachRequest::set_resourceid(const char* value) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.AttachRequest.resourceId)
}
inline void AttachRequest::set_resourceid(const char* value, size_t size) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.AttachRequest.resourceId)
}
inline ::std::string* AttachRequest::mutable_resourceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.AttachRequest.resourceId)
  return resourceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachRequest::release_resourceid() {
  
  return resourceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachRequest::set_allocated_resourceid(::std::string* resourceid) {
  if (resourceid != NULL) {
    
  } else {
    
  }
  resourceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.AttachRequest.resourceId)
}

// optional string resourceKey = 2;
inline void AttachRequest::clear_resourcekey() {
  resourcekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachRequest::resourcekey() const {
  // @@protoc_insertion_point(field_get:crdt.AttachRequest.resourceKey)
  return resourcekey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachRequest::set_resourcekey(const ::std::string& value) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.AttachRequest.resourceKey)
}
inline void AttachRequest::set_resourcekey(const char* value) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.AttachRequest.resourceKey)
}
inline void AttachRequest::set_resourcekey(const char* value, size_t size) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.AttachRequest.resourceKey)
}
inline ::std::string* AttachRequest::mutable_resourcekey() {
  
  // @@protoc_insertion_point(field_mutable:crdt.AttachRequest.resourceKey)
  return resourcekey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachRequest::release_resourcekey() {
  
  return resourcekey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachRequest::set_allocated_resourcekey(::std::string* resourcekey) {
  if (resourcekey != NULL) {
    
  } else {
    
  }
  resourcekey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourcekey);
  // @@protoc_insertion_point(field_set_allocated:crdt.AttachRequest.resourceKey)
}

// -------------------------------------------------------------------

// AttachResponse

// optional .crdt.Status status = 1;
inline bool AttachResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void AttachResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::crdt::Status& AttachResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.AttachResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::crdt::Status* AttachResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.AttachResponse.status)
  return status_;
}
inline ::crdt::Status* AttachResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void AttachResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.AttachResponse.status)
}

// optional string referenceId = 2;
inline void AttachResponse::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AttachResponse::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.AttachResponse.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachResponse::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.AttachResponse.referenceId)
}
inline void AttachResponse::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.AttachResponse.referenceId)
}
inline void AttachResponse::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.AttachResponse.referenceId)
}
inline ::std::string* AttachResponse::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.AttachResponse.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AttachResponse::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AttachResponse::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.AttachResponse.referenceId)
}

// -------------------------------------------------------------------

// DetachRequest

// optional string referenceId = 1;
inline void DetachRequest::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DetachRequest::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.DetachRequest.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetachRequest::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.DetachRequest.referenceId)
}
inline void DetachRequest::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.DetachRequest.referenceId)
}
inline void DetachRequest::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.DetachRequest.referenceId)
}
inline ::std::string* DetachRequest::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.DetachRequest.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DetachRequest::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DetachRequest::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.DetachRequest.referenceId)
}

// -------------------------------------------------------------------

// DetachResponse

// optional .crdt.Status status = 1;
inline bool DetachResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void DetachResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::crdt::Status& DetachResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.DetachResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::crdt::Status* DetachResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.DetachResponse.status)
  return status_;
}
inline ::crdt::Status* DetachResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void DetachResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.DetachResponse.status)
}

// -------------------------------------------------------------------

// CommitRequest

// optional string referenceId = 1;
inline void CommitRequest::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CommitRequest::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.CommitRequest.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommitRequest::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CommitRequest.referenceId)
}
inline void CommitRequest::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CommitRequest.referenceId)
}
inline void CommitRequest::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CommitRequest.referenceId)
}
inline ::std::string* CommitRequest::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CommitRequest.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CommitRequest::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CommitRequest::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.CommitRequest.referenceId)
}

// -------------------------------------------------------------------

// CommitResponse

// optional .crdt.Status status = 1;
inline bool CommitResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void CommitResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::crdt::Status& CommitResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.CommitResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::crdt::Status* CommitResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.CommitResponse.status)
  return status_;
}
inline ::crdt::Status* CommitResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void CommitResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.CommitResponse.status)
}

// -------------------------------------------------------------------

// EqualsRequest

// optional string referenceId = 1;
inline void EqualsRequest::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EqualsRequest::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.EqualsRequest.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EqualsRequest::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.EqualsRequest.referenceId)
}
inline void EqualsRequest::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.EqualsRequest.referenceId)
}
inline void EqualsRequest::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.EqualsRequest.referenceId)
}
inline ::std::string* EqualsRequest::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.EqualsRequest.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EqualsRequest::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EqualsRequest::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.EqualsRequest.referenceId)
}

// optional string otherReferenceId = 2;
inline void EqualsRequest::clear_otherreferenceid() {
  otherreferenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EqualsRequest::otherreferenceid() const {
  // @@protoc_insertion_point(field_get:crdt.EqualsRequest.otherReferenceId)
  return otherreferenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EqualsRequest::set_otherreferenceid(const ::std::string& value) {
  
  otherreferenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.EqualsRequest.otherReferenceId)
}
inline void EqualsRequest::set_otherreferenceid(const char* value) {
  
  otherreferenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.EqualsRequest.otherReferenceId)
}
inline void EqualsRequest::set_otherreferenceid(const char* value, size_t size) {
  
  otherreferenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.EqualsRequest.otherReferenceId)
}
inline ::std::string* EqualsRequest::mutable_otherreferenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.EqualsRequest.otherReferenceId)
  return otherreferenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EqualsRequest::release_otherreferenceid() {
  
  return otherreferenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EqualsRequest::set_allocated_otherreferenceid(::std::string* otherreferenceid) {
  if (otherreferenceid != NULL) {
    
  } else {
    
  }
  otherreferenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), otherreferenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.EqualsRequest.otherReferenceId)
}

// -------------------------------------------------------------------

// EqualsResponse

// optional .crdt.Status status = 1;
inline bool EqualsResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void EqualsResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::crdt::Status& EqualsResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.EqualsResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::crdt::Status* EqualsResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.EqualsResponse.status)
  return status_;
}
inline ::crdt::Status* EqualsResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void EqualsResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.EqualsResponse.status)
}

// optional bool result = 2;
inline void EqualsResponse::clear_result() {
  result_ = false;
}
inline bool EqualsResponse::result() const {
  // @@protoc_insertion_point(field_get:crdt.EqualsResponse.result)
  return result_;
}
inline void EqualsResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:crdt.EqualsResponse.result)
}

// -------------------------------------------------------------------

// MergeRequest

// optional string referenceId = 1;
inline void MergeRequest::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MergeRequest::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.MergeRequest.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MergeRequest::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.MergeRequest.referenceId)
}
inline void MergeRequest::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.MergeRequest.referenceId)
}
inline void MergeRequest::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.MergeRequest.referenceId)
}
inline ::std::string* MergeRequest::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.MergeRequest.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MergeRequest::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MergeRequest::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.MergeRequest.referenceId)
}

// optional string otherReferenceId = 2;
inline void MergeRequest::clear_otherreferenceid() {
  otherreferenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MergeRequest::otherreferenceid() const {
  // @@protoc_insertion_point(field_get:crdt.MergeRequest.otherReferenceId)
  return otherreferenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MergeRequest::set_otherreferenceid(const ::std::string& value) {
  
  otherreferenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.MergeRequest.otherReferenceId)
}
inline void MergeRequest::set_otherreferenceid(const char* value) {
  
  otherreferenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.MergeRequest.otherReferenceId)
}
inline void MergeRequest::set_otherreferenceid(const char* value, size_t size) {
  
  otherreferenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.MergeRequest.otherReferenceId)
}
inline ::std::string* MergeRequest::mutable_otherreferenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.MergeRequest.otherReferenceId)
  return otherreferenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MergeRequest::release_otherreferenceid() {
  
  return otherreferenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MergeRequest::set_allocated_otherreferenceid(::std::string* otherreferenceid) {
  if (otherreferenceid != NULL) {
    
  } else {
    
  }
  otherreferenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), otherreferenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.MergeRequest.otherReferenceId)
}

// -------------------------------------------------------------------

// MergeResponse

// optional .crdt.Status status = 1;
inline bool MergeResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void MergeResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::crdt::Status& MergeResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.MergeResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::crdt::Status* MergeResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.MergeResponse.status)
  return status_;
}
inline ::crdt::Status* MergeResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void MergeResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.MergeResponse.status)
}

// -------------------------------------------------------------------

// CloneRequest

// optional string referenceId = 1;
inline void CloneRequest::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloneRequest::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.CloneRequest.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloneRequest::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CloneRequest.referenceId)
}
inline void CloneRequest::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CloneRequest.referenceId)
}
inline void CloneRequest::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CloneRequest.referenceId)
}
inline ::std::string* CloneRequest::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CloneRequest.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloneRequest::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloneRequest::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.CloneRequest.referenceId)
}

// -------------------------------------------------------------------

// CloneResponse

// optional .crdt.Status status = 1;
inline bool CloneResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void CloneResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::crdt::Status& CloneResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.CloneResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::crdt::Status* CloneResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.CloneResponse.status)
  return status_;
}
inline ::crdt::Status* CloneResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void CloneResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.CloneResponse.status)
}

// optional string resourceId = 2;
inline void CloneResponse::clear_resourceid() {
  resourceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloneResponse::resourceid() const {
  // @@protoc_insertion_point(field_get:crdt.CloneResponse.resourceId)
  return resourceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloneResponse::set_resourceid(const ::std::string& value) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CloneResponse.resourceId)
}
inline void CloneResponse::set_resourceid(const char* value) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CloneResponse.resourceId)
}
inline void CloneResponse::set_resourceid(const char* value, size_t size) {
  
  resourceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CloneResponse.resourceId)
}
inline ::std::string* CloneResponse::mutable_resourceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CloneResponse.resourceId)
  return resourceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloneResponse::release_resourceid() {
  
  return resourceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloneResponse::set_allocated_resourceid(::std::string* resourceid) {
  if (resourceid != NULL) {
    
  } else {
    
  }
  resourceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.CloneResponse.resourceId)
}

// optional string resourceKey = 3;
inline void CloneResponse::clear_resourcekey() {
  resourcekey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CloneResponse::resourcekey() const {
  // @@protoc_insertion_point(field_get:crdt.CloneResponse.resourceKey)
  return resourcekey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloneResponse::set_resourcekey(const ::std::string& value) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.CloneResponse.resourceKey)
}
inline void CloneResponse::set_resourcekey(const char* value) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.CloneResponse.resourceKey)
}
inline void CloneResponse::set_resourcekey(const char* value, size_t size) {
  
  resourcekey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.CloneResponse.resourceKey)
}
inline ::std::string* CloneResponse::mutable_resourcekey() {
  
  // @@protoc_insertion_point(field_mutable:crdt.CloneResponse.resourceKey)
  return resourcekey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CloneResponse::release_resourcekey() {
  
  return resourcekey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CloneResponse::set_allocated_resourcekey(::std::string* resourcekey) {
  if (resourcekey != NULL) {
    
  } else {
    
  }
  resourcekey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resourcekey);
  // @@protoc_insertion_point(field_set_allocated:crdt.CloneResponse.resourceKey)
}

// -------------------------------------------------------------------

// SupportedTypesResponse

// repeated .crdt.TypeMessage types = 1;
inline int SupportedTypesResponse::types_size() const {
  return types_.size();
}
inline void SupportedTypesResponse::clear_types() {
  types_.Clear();
}
inline const ::crdt::TypeMessage& SupportedTypesResponse::types(int index) const {
  // @@protoc_insertion_point(field_get:crdt.SupportedTypesResponse.types)
  return types_.Get(index);
}
inline ::crdt::TypeMessage* SupportedTypesResponse::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:crdt.SupportedTypesResponse.types)
  return types_.Mutable(index);
}
inline ::crdt::TypeMessage* SupportedTypesResponse::add_types() {
  // @@protoc_insertion_point(field_add:crdt.SupportedTypesResponse.types)
  return types_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >*
SupportedTypesResponse::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:crdt.SupportedTypesResponse.types)
  return &types_;
}
inline const ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >&
SupportedTypesResponse::types() const {
  // @@protoc_insertion_point(field_list:crdt.SupportedTypesResponse.types)
  return types_;
}

// -------------------------------------------------------------------

// SupportedStorageTypesResponse

// repeated .crdt.TypeMessage types = 1;
inline int SupportedStorageTypesResponse::types_size() const {
  return types_.size();
}
inline void SupportedStorageTypesResponse::clear_types() {
  types_.Clear();
}
inline const ::crdt::TypeMessage& SupportedStorageTypesResponse::types(int index) const {
  // @@protoc_insertion_point(field_get:crdt.SupportedStorageTypesResponse.types)
  return types_.Get(index);
}
inline ::crdt::TypeMessage* SupportedStorageTypesResponse::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:crdt.SupportedStorageTypesResponse.types)
  return types_.Mutable(index);
}
inline ::crdt::TypeMessage* SupportedStorageTypesResponse::add_types() {
  // @@protoc_insertion_point(field_add:crdt.SupportedStorageTypesResponse.types)
  return types_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >*
SupportedStorageTypesResponse::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:crdt.SupportedStorageTypesResponse.types)
  return &types_;
}
inline const ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >&
SupportedStorageTypesResponse::types() const {
  // @@protoc_insertion_point(field_list:crdt.SupportedStorageTypesResponse.types)
  return types_;
}

// -------------------------------------------------------------------

// SupportedCryptoMethodsResponse

// repeated .crdt.TypeMessage types = 1;
inline int SupportedCryptoMethodsResponse::types_size() const {
  return types_.size();
}
inline void SupportedCryptoMethodsResponse::clear_types() {
  types_.Clear();
}
inline const ::crdt::TypeMessage& SupportedCryptoMethodsResponse::types(int index) const {
  // @@protoc_insertion_point(field_get:crdt.SupportedCryptoMethodsResponse.types)
  return types_.Get(index);
}
inline ::crdt::TypeMessage* SupportedCryptoMethodsResponse::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:crdt.SupportedCryptoMethodsResponse.types)
  return types_.Mutable(index);
}
inline ::crdt::TypeMessage* SupportedCryptoMethodsResponse::add_types() {
  // @@protoc_insertion_point(field_add:crdt.SupportedCryptoMethodsResponse.types)
  return types_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >*
SupportedCryptoMethodsResponse::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:crdt.SupportedCryptoMethodsResponse.types)
  return &types_;
}
inline const ::google::protobuf::RepeatedPtrField< ::crdt::TypeMessage >&
SupportedCryptoMethodsResponse::types() const {
  // @@protoc_insertion_point(field_list:crdt.SupportedCryptoMethodsResponse.types)
  return types_;
}

// -------------------------------------------------------------------

// SetListRequest

// optional string referenceId = 1;
inline void SetListRequest::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetListRequest::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.SetListRequest.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetListRequest::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.SetListRequest.referenceId)
}
inline void SetListRequest::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.SetListRequest.referenceId)
}
inline void SetListRequest::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.SetListRequest.referenceId)
}
inline ::std::string* SetListRequest::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.SetListRequest.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetListRequest::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetListRequest::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.SetListRequest.referenceId)
}

// -------------------------------------------------------------------

// SetInsertRequest

// optional .crdt.ResourceObject object = 1;
inline bool SetInsertRequest::has_object() const {
  return !_is_default_instance_ && object_ != NULL;
}
inline void SetInsertRequest::clear_object() {
  if (GetArenaNoVirtual() == NULL && object_ != NULL) delete object_;
  object_ = NULL;
}
inline const ::crdt::ResourceObject& SetInsertRequest::object() const {
  // @@protoc_insertion_point(field_get:crdt.SetInsertRequest.object)
  return object_ != NULL ? *object_ : *default_instance_->object_;
}
inline ::crdt::ResourceObject* SetInsertRequest::mutable_object() {
  
  if (object_ == NULL) {
    object_ = new ::crdt::ResourceObject;
  }
  // @@protoc_insertion_point(field_mutable:crdt.SetInsertRequest.object)
  return object_;
}
inline ::crdt::ResourceObject* SetInsertRequest::release_object() {
  
  ::crdt::ResourceObject* temp = object_;
  object_ = NULL;
  return temp;
}
inline void SetInsertRequest::set_allocated_object(::crdt::ResourceObject* object) {
  delete object_;
  object_ = object;
  if (object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.SetInsertRequest.object)
}

// -------------------------------------------------------------------

// SetInsertResponse

// optional .crdt.Status status = 1;
inline bool SetInsertResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void SetInsertResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::crdt::Status& SetInsertResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.SetInsertResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::crdt::Status* SetInsertResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.SetInsertResponse.status)
  return status_;
}
inline ::crdt::Status* SetInsertResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void SetInsertResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.SetInsertResponse.status)
}

// -------------------------------------------------------------------

// SetRemoveRequest

// optional .crdt.ResourceObject object = 1;
inline bool SetRemoveRequest::has_object() const {
  return !_is_default_instance_ && object_ != NULL;
}
inline void SetRemoveRequest::clear_object() {
  if (GetArenaNoVirtual() == NULL && object_ != NULL) delete object_;
  object_ = NULL;
}
inline const ::crdt::ResourceObject& SetRemoveRequest::object() const {
  // @@protoc_insertion_point(field_get:crdt.SetRemoveRequest.object)
  return object_ != NULL ? *object_ : *default_instance_->object_;
}
inline ::crdt::ResourceObject* SetRemoveRequest::mutable_object() {
  
  if (object_ == NULL) {
    object_ = new ::crdt::ResourceObject;
  }
  // @@protoc_insertion_point(field_mutable:crdt.SetRemoveRequest.object)
  return object_;
}
inline ::crdt::ResourceObject* SetRemoveRequest::release_object() {
  
  ::crdt::ResourceObject* temp = object_;
  object_ = NULL;
  return temp;
}
inline void SetRemoveRequest::set_allocated_object(::crdt::ResourceObject* object) {
  delete object_;
  object_ = object;
  if (object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.SetRemoveRequest.object)
}

// -------------------------------------------------------------------

// SetRemoveResponse

// optional .crdt.Status status = 1;
inline bool SetRemoveResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void SetRemoveResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::crdt::Status& SetRemoveResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.SetRemoveResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::crdt::Status* SetRemoveResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.SetRemoveResponse.status)
  return status_;
}
inline ::crdt::Status* SetRemoveResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void SetRemoveResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.SetRemoveResponse.status)
}

// -------------------------------------------------------------------

// SetLengthRequest

// optional string referenceId = 1;
inline void SetLengthRequest::clear_referenceid() {
  referenceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLengthRequest::referenceid() const {
  // @@protoc_insertion_point(field_get:crdt.SetLengthRequest.referenceId)
  return referenceid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLengthRequest::set_referenceid(const ::std::string& value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:crdt.SetLengthRequest.referenceId)
}
inline void SetLengthRequest::set_referenceid(const char* value) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:crdt.SetLengthRequest.referenceId)
}
inline void SetLengthRequest::set_referenceid(const char* value, size_t size) {
  
  referenceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:crdt.SetLengthRequest.referenceId)
}
inline ::std::string* SetLengthRequest::mutable_referenceid() {
  
  // @@protoc_insertion_point(field_mutable:crdt.SetLengthRequest.referenceId)
  return referenceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLengthRequest::release_referenceid() {
  
  return referenceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLengthRequest::set_allocated_referenceid(::std::string* referenceid) {
  if (referenceid != NULL) {
    
  } else {
    
  }
  referenceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), referenceid);
  // @@protoc_insertion_point(field_set_allocated:crdt.SetLengthRequest.referenceId)
}

// -------------------------------------------------------------------

// SetLengthResponse

// optional .crdt.Status status = 1;
inline bool SetLengthResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void SetLengthResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::crdt::Status& SetLengthResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.SetLengthResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::crdt::Status* SetLengthResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.SetLengthResponse.status)
  return status_;
}
inline ::crdt::Status* SetLengthResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void SetLengthResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.SetLengthResponse.status)
}

// optional uint64 length = 2;
inline void SetLengthResponse::clear_length() {
  length_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 SetLengthResponse::length() const {
  // @@protoc_insertion_point(field_get:crdt.SetLengthResponse.length)
  return length_;
}
inline void SetLengthResponse::set_length(::google::protobuf::uint64 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:crdt.SetLengthResponse.length)
}

// -------------------------------------------------------------------

// SetContainsRequest

// optional .crdt.ResourceObject object = 1;
inline bool SetContainsRequest::has_object() const {
  return !_is_default_instance_ && object_ != NULL;
}
inline void SetContainsRequest::clear_object() {
  if (GetArenaNoVirtual() == NULL && object_ != NULL) delete object_;
  object_ = NULL;
}
inline const ::crdt::ResourceObject& SetContainsRequest::object() const {
  // @@protoc_insertion_point(field_get:crdt.SetContainsRequest.object)
  return object_ != NULL ? *object_ : *default_instance_->object_;
}
inline ::crdt::ResourceObject* SetContainsRequest::mutable_object() {
  
  if (object_ == NULL) {
    object_ = new ::crdt::ResourceObject;
  }
  // @@protoc_insertion_point(field_mutable:crdt.SetContainsRequest.object)
  return object_;
}
inline ::crdt::ResourceObject* SetContainsRequest::release_object() {
  
  ::crdt::ResourceObject* temp = object_;
  object_ = NULL;
  return temp;
}
inline void SetContainsRequest::set_allocated_object(::crdt::ResourceObject* object) {
  delete object_;
  object_ = object;
  if (object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.SetContainsRequest.object)
}

// -------------------------------------------------------------------

// SetContainsResponse

// optional .crdt.Status status = 1;
inline bool SetContainsResponse::has_status() const {
  return !_is_default_instance_ && status_ != NULL;
}
inline void SetContainsResponse::clear_status() {
  if (GetArenaNoVirtual() == NULL && status_ != NULL) delete status_;
  status_ = NULL;
}
inline const ::crdt::Status& SetContainsResponse::status() const {
  // @@protoc_insertion_point(field_get:crdt.SetContainsResponse.status)
  return status_ != NULL ? *status_ : *default_instance_->status_;
}
inline ::crdt::Status* SetContainsResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::crdt::Status;
  }
  // @@protoc_insertion_point(field_mutable:crdt.SetContainsResponse.status)
  return status_;
}
inline ::crdt::Status* SetContainsResponse::release_status() {
  
  ::crdt::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline void SetContainsResponse::set_allocated_status(::crdt::Status* status) {
  delete status_;
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:crdt.SetContainsResponse.status)
}

// optional bool result = 2;
inline void SetContainsResponse::clear_result() {
  result_ = false;
}
inline bool SetContainsResponse::result() const {
  // @@protoc_insertion_point(field_get:crdt.SetContainsResponse.result)
  return result_;
}
inline void SetContainsResponse::set_result(bool value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:crdt.SetContainsResponse.result)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace crdt

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_crdt_2eproto__INCLUDED
